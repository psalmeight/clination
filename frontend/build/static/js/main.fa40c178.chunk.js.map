{"version":3,"sources":["store/index.js","components/Utils/RouterAction.js","rest/index.js","rest/users.api.js","containers/AccessDenied.js","components/Layout/CAppBar.js","components/Layout/CMainLayout.js","components/Layout/CDrawerLayout.js","components/Layout/CConfirm.js","components/Pages/Dashboard.js","components/Utils/RoleAccessConfig.js","rest/clinic.api.js","components/Pages/ManageClinics.js","rest/clinic_user.api.js","components/Pages/ManageUsers.js","components/Pages/Settings.js","components/Clinic/ClinicDashboard.js","rest/patient.api.js","components/Clinic/Patients.js","components/Clinic/Appointments.js","components/Patient/PatientDashboard.js","components/Patient/PatientInformation.js","rest/patient_history.api.js","components/Patient/PatientHistory.js","rest/patient_vaccination.api.js","components/Patient/PatientVaccination.js","components/Patient/PatientMedications.js","components/Units/ClinicCard.js","components/Units/ClinicForm.js","components/Units/UserForm.js","components/Units/PatientForm.js","components/Units/ClinicUserForm.js","components/Units/PatientHistoryForm.js","components/Units/PatientVaccinationForm.js","components/Utils/ActionBar.js","containers/MainContainer.js","containers/HomePage.js","containers/ClinicListPage.js","containers/PatientContainer.js","containers/ClinicContainer.js","routes/index.js","utils/registerServiceWorker.js","index.js","reducers/index.js","store/store.prod.js"],"names":["module","exports","require","RouteTo","_","isEmpty","localStorage","getItem","props","path","history","push","CheckAuthentication","Component","AllowedRoles","uxRx","indexOf","react_default","a","createElement","react_router","to","ActOnBranch","method","name","arguments","length","undefined","value","setItem","clear","instance","axios","create","baseURL","get","params","config","defaults","headers","common","post","body","destroy","delete","_getUsers","callback","then","response","data","catch","e","console","log","_getDoctorsByClinic","clinicID","concat","_createUser","_tryLogin","payload","status","access_token","user","role","id","_tryLogout","_deleteUser","userId","AccessDenied","tryLogout","_this","_this2","this","href","onClick","React","withStyles","theme","root","flexGrow","grow","menuButton","Object","defineProperty","marginRight","breakpoints","up","display","appBar","marginLeft","width","appBarBackType","menuButtonBackType","classes","classAppBar","backType","className","style","marginBottom","AppBar_default","positionStatic","Toolbar_default","IconButton_default","color","aria-label","goBack","ArrowBack_default","Typography_default","variant","noWrap","setTitle","drawers","handleDrawerToggle","Menu_default","showRegistration","Button_default","logout","position","right","CMainLayout","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","form","confirm","message","val","setState","showConfirm","submitForm","handleChange","field","target","index_es","children","open","container","direction","justify","alignItems","item","elevation","padding","noValidate","autoComplete","spacing","md","xs","label","placeholder","fullWidth","margin","onChange","required","InputLabelProps","shrink","inputProps","autoCapitalize","type","defaultValue","gutterBottom","marginTop","textAlign","Layout_CConfirm","key","onClose","onOk","title","actions","actionTitle","action","actionType","CDrawerLayout","mobileOpen","pageTitle","validateShouldTitle","goTo","location","pathname","_this$props","contentClass","content","unPad","contentNoPads","drawer","toolbar","List_default","map","ListItem_default","button","route","ListItemIcon_default","icon","ListItemText_default","primary","CssBaseline_default","firstPage","Layout_CAppBar","routePath","assign","Hidden_default","smUp","implementation","Drawer_default","anchor","paper","drawerPaper","xsDown","flexShrink","mixins","unit","withTheme","CConfirm","Modal_default","top","left","transform","size","CConfirmWrapped","backgroundColor","palette","background","boxShadow","shadows","outline","Dashboard","dashboardData","fetchData","Paper_default","component","objectSpread","gutters","paddingTop","paddingBottom","REGISTER_CLINIC","VIEW_DASHBOARD","roleQualified","roles","currentRole","includes","_getClinicsOwn","_createClinic","_deleteClinic","clinicId","ManageClinics","openClinicForm","deleteClinic","onCardClick","addNewClinic","rule","Utils_ActionBar","flexDirection","fontSize","clinic","lg","Units_ClinicCard","onDelete","Units_ClinicForm","closeForm","refreshList","_createClinicUser","_deleteClinicUser","clinic_userId","ManageUsers","expanded","showUserRole","deleteRoleOpen","deleteUserOpen","selectedUserID","selectedRoleID","panel","event","handleDelete","alert","userID","onDeleteRole","roleID","onDeleteUser","deleteRoleSuccess","deleteUserSuccess","record","idx","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","heading","lastname","firstname","middlename","ExpansionPanelDetails_default","Table_default","TableBody_default","TableRow_default","TableCell_default","email","dob","contact_no","clinic_name","ExpansionPanelActions_default","justifyContent","Units_UserForm","Units_ClinicUserForm","deleteCardOpen","chip","textTransform","Settings","TabContainer","ClinicDashboard","Tabs_default","Tab_default","Clinic_Patients","Clinic_Appointments","_getPatient","patientID","_getPatientsByClinic","search","_createPatient","Patients","openPatientForm","searchPatient","match","patientSelect","searchRoot","paddingLeft","InputBase_default","input","avatarClass","gender","purpleAvatar","orangeAvatar","Avatar_default","Units_PatientForm","flex","iconButton","avatar","deepOrange","deepPurple","Appointments","employee_name","contact","clinics","Search_default","PatientDashboard","patient","fetchPatient","fetchPatientSuccess","patient_name","fullname","details","react","alt","src","secondary","PatientDashboard_TabContainer","Patient_PatientHistory","Patient_PatientVaccination","Patient_PatientInformation","PatientInformation","_getPatientHistoriesByPatient","_createPatientHistory","_deletePatientHistory","patient_historyId","PatientHistory","openDataForm","selectedDataID","onDeleteData","dataID","confirmDelete","deleteDataSuccess","moment","visit_datetime","format","chief_complaint","paddingRight","history_present_illness","physical_exam","diagnosis","init_weight","init_height","init_temp","init_pulse_rate","init_resp_rate","Units_PatientHistoryForm","_getPatientVaccinationsByPatient","_createPatientVaccination","_deletePatientVaccination","patient_vaccinationId","PatientVaccination","vaccinationRecord","vaccination_details","JSON","parse","vaccineString","forEach","vRec","i","vaccine","vaccination_date","vaccination_notes","next_vaccination_schedule","Units_PatientVaccinationForm","PatientMedications","date","hpi","Card_default","card","CardContent_default","minWidth","ClinicCard","deleteOpen","CardActionArea_default","clinic_address","clinic_contact","CardActions_default","media","objectFit","ClinicForm","showPopup","handleClose","TextField_default","Grid_default","ClinicFormWrapped","UserForm","handleDateChange","material_ui_pickers_esm","keyboard","mask","select","SelectProps","MenuProps","menu","MenuItem_default","UserFormWrapped","PatientForm","doctors","fetchDoctors","doctor","PatientFormWrapped","ClinicUserForm","fetchClinics","fetchClinicsSuccess","textField","clinic_id","ClinicUserFormWrapped","PatientHistoryForm","InputProps","endAdornment","InputAdornment_default","PatientHistoryFormWrapped","PatientVaccinationForm","vaccList","stringify","handleVaccChange","addToVaccList","Math","round","random","removeVacc","remove","PatientVaccinationFormWrapped","ActionBar","MainContainer","password","inProgress","validateAuth","tryLogin","Layout_CMainLayout","alignContent","onKeyPress","ev","preventDefault","disabled","HomePage","showClinicForm","MoveToInbox_default","Mail_default","Layout_CDrawerLayout","exact","render","Pages_Dashboard","Pages_ManageClinics","Pages_ManageUsers","Pages_Settings","ClinicListPage","patients","appointments","PatientContainer","Patient_PatientDashboard","ClinicContainer","Clinic_ClinicDashboard","Routes","react_router_dom","containers_HomePage","containers_ClinicListPage","containers_ClinicContainer","containers_PatientContainer","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registrationParam","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","createMuiTheme","main","utils","MomentUtils","core_styles","es","store","configureStore","routes","document","getElementById","URL","process","origin","addEventListener","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","rootReducer","combineReducers","__webpack_require__","d","__webpack_exports__","middlewares","ReduxThunk","enhancer","applyMiddleware","apply","initialState","createStore"],"mappings":"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","file":"static/js/main.fa40c178.chunk.js","sourcesContent":["/* eslint-disable global-require */\nmodule.exports = process.env.NODE_ENV === 'production' ? require('./store.prod') : require('./store.dev')\n","import React from 'react'\nimport { Redirect, withRouter } from 'react-router'\nimport _ from 'lodash'\nimport { AccessDenied } from 'containers'\n\nlet checkAuth = !_.isEmpty(localStorage.getItem('access_token')) ? true : false\n\nconst RouteTo = (props, path) => {\n  props.history.push(path)\n}\n\nconst CheckAuthentication = (Component, AllowedRoles) => {\n\n  if (!_.isEmpty(localStorage.getItem('rx'))) {\n    \n    let uxRx = localStorage.getItem('rx')\n\n    if (_.indexOf(AllowedRoles, uxRx) == -1) {\n      return <Redirect to=\"/denied\" />\n    }\n  }\n\n  return !_.isEmpty(localStorage.getItem('access_token')) ? Component : <Redirect to=\"/\" />\n}\n\nconst ActOnBranch = (method, name = null, value = null) => {\n  if (method === 'get') {\n    localStorage.getItem(name, value)\n  } else if (method === 'set') {\n    localStorage.setItem(name, value)\n  } else if (method === 'clear') {\n    localStorage.clear()\n  }\n}\n\nconst IP_ADDRESS = 'srv.hisd3.com'\n\nexport { RouteTo, CheckAuthentication, ActOnBranch, IP_ADDRESS }\n","import axios from 'axios'\nimport { IP_ADDRESS } from '../components/Utils/RouterAction'\n\n//const auth0BaseUrl = 'https://' + IP_ADDRESS\nconst auth0BaseUrl = 'http://localhost:8000'\n\nlet instance = axios.create({\n  baseURL: auth0BaseUrl,\n})\n\nexport const get = (path, params, config) => {\n  instance.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n  return instance.get(path, params, config)\n}\n\nexport const post = (path, body, config) => {\n  instance.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n  return instance.post(path, body || {}, config)\n}\n\nexport const destroy = (path, config) => {\n  instance.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n  return instance.delete(path, config)\n}\n","import { get, post, destroy } from '../rest'\nimport _ from 'lodash'\n\nexport let _getUsers = (callback = null) => {\n  get('/api/v1/users')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getUsers', e)\n    })\n}\n\nexport let _getDoctorsByClinic = (clinicID, callback = null) => {\n  get(`/api/v1/users/clinic_doctors/${clinicID}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getDoctorsByClinic', e)\n    })\n}\n\nexport let _createUser = (data, callback = null, mainUser = true) => {\n  if(mainUser){\n    post('/api/user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveUser', e)\n    })\n  }\n  else {\n    post('/api/v1/user/staff', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveUser', e)\n    })\n  }\n\n}\n\nexport let _tryLogin = (payload, callback = null) => {\n  post('/api/trylogin', payload)\n    .then(response => {\n      \n      if(response.data.status == 200 && !_.isEmpty(response.data.access_token)){\n        localStorage.setItem('access_token', response.data.access_token)\n        localStorage.setItem('rx', response.data.user.role)\n        localStorage.setItem('user_id', response.data.user.id)\n      }\n\n      if (callback) callback(response.data)\n\n    })\n    .catch(e => {\n      console.log('Error in _getUsers', e)\n    })\n}\n\nexport let _tryLogout = (payload, callback = null) => {\n  post('/api/trylogout', payload)\n    .then(response => {\n      if (callback) callback()\n    })\n    .catch(e => {\n      console.log('Error in _getUsers', e)\n    })\n}\n\nexport let _saveUser = (data, callback = null) => {\n  post('/api/v1/user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveUser', e)\n    })\n}\n\nexport let _deleteUser = (userId, callback = null) => {\n  destroy(`/api/v1/user/${userId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deleteUser', e)\n    })\n}\n","import React from 'react'\nimport { _tryLogout } from '../rest/users.api'\nimport { RouteTo, ActOnBranch } from '../components/Utils/RouterAction'\n\nexport default class AccessDenied extends React.Component {\n  tryLogout = () => {\n    _tryLogout({}, data => {\n       ActOnBranch('clear')\n       RouteTo(this.props, '/')\n    })\n }\n\n  render() {\n    return (\n      <div>\n        <h3>Unable to Access This Page</h3>\n        <a href=\"#\" onClick={() => this.tryLogout()}>Go back to Login page</a>\n      </div>\n    )\n  }\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { ClinicForm } from 'components'\n\nimport _ from 'lodash'\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   menuButton: {\n      marginRight: 20,\n      [theme.breakpoints.up(\"sm\")]: {\n         display: \"none\"\n      },\n   },\n   appBar: {\n      marginLeft: drawerWidth,\n      [theme.breakpoints.up(\"sm\")]: {\n         width: `calc(100% - ${drawerWidth}px)`\n      },\n   },\n   appBarBackType: {\n      marginLeft: 0,\n   },\n   menuButtonBackType: {\n      marginRight: 0,\n   },\n})\n\nfunction CAppBar(props) {\n   const { classes } = props\n    \n   let classAppBar = props.backType ? classes.appBarBackType : classes.appBar\n\n   return (\n      <div className={props.className} style={{ marginBottom: 80 }}>\n         <AppBar positionStatic className={classAppBar}>\n            <Toolbar>\n\n               {\n                  props.backType ? (\n                     [<IconButton\n                        color=\"inherit\"\n                        aria-label=\"Open drawer\"\n                        onClick={() => props.goBack()}\n                        className={classes.menuButtonBackType}>\n                           <ArrowBackIcon />\n                     </IconButton>,\n                     <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        {props.setTitle || 'Dashboard'}\n                     </Typography>]\n                  ) : null\n               }\n\n               {\n                  props.drawers ? (\n                     [<IconButton\n                        color=\"inherit\"\n                        aria-label=\"Open drawer\"\n                        onClick={() => props.handleDrawerToggle()}\n                        className={classes.menuButton}>\n                            <MenuIcon />\n                      </IconButton>,\n                      <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        {props.setTitle || 'Dashboard'}\n                      </Typography>]\n                     ) : null\n               }\n\n               {\n                  !props.backType && !props.drawers ? (\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                     {props.setTitle || 'Dashboard'}\n                  </Typography>\n                  ) : null\n               }\n               \n               {\n                  props.showRegistration ?\n                     <Button color=\"inherit\" onClick={props.showRegistration}>Register</Button>\n                  : <Button color=\"inherit\" onClick={() => props.logout()} style={{ position: 'absolute', right: 20 }}>Logout</Button>\n               }\n        </Toolbar>\n      </AppBar>\n      \n    </div>\n  );\n}\n\nCAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(CAppBar)","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport _ from 'lodash'\n\nimport { _createUser } from '../../rest/users.api'\n\nimport CAppBar from './CAppBar'\nimport { CConfirm } from 'components'\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    }\n}\n\nclass CMainLayout extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        showRegistration: false,\n        form: {},\n        confirm: false,\n        message: ''\n    }\n\n    showRegistration = val => {\n        this.setState({ showRegistration: val })\n    }\n    \n    showConfirm = val => {\n        this.setState({ confirm: val })\n    }\n\n    submitForm = () => {\n        let form = this.state.form\n        form['ox'] = true;\n\n        _createUser(form, data => {\n            if(data.status != 200){\n                this.setState({ message: data.message }, () => this.showConfirm(false))\n            }\n            else {\n                this.showRegistration(false)\n                this.showConfirm(false)\n            }\n        })\n\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n\n        this.setState({\n            form\n        })\n    }\n\n    render(){\n        const { classes } = this.props\n        return (\n            <div className={classes.root}>\n                \n                <div style={{ marginBottom: 80 }} />\n\n                <AppBar positionStatic>\n                    <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                        CLINation\n                    </Typography>\n                    <Button color=\"inherit\" onClick={this.showRegistration}>REGISTER</Button>\n                    </Toolbar>\n                </AppBar>\n\n                {this.props.children}\n\n                <Modal open={this.state.showRegistration}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    User Registration Form\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <Grid container spacing={16}>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"lastname\"\n                                                label=\"Lastname\"\n                                                placeholder=\"Enter Lastname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('lastname', value)}\n                                                required={true}\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"firstname\"\n                                                label=\"Firstname\"\n                                                placeholder=\"Enter Firstname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                onChange={value => this.handleChange('firstname', value)}\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"middlename\"\n                                                label=\"Middlename\"\n                                                placeholder=\"Enter Middlename\"\n                                                onChange={value => this.handleChange('middlename', value)}\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n                                    <TextField\n                                        label={'Birthdate'}\n                                        onChange={value => this.handleChange('dob', value)}\n                                        type=\"date\"\n                                        defaultValue=\"03/13/1990\"\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    /> \n\n                                    <TextField\n                                        id=\"contact\"\n                                        label=\"Contact Number\"\n                                        placeholder=\"Enter Contact Number\"\n                                        onChange={value => this.handleChange('contact_no', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"email\"\n                                        label=\"Email\"\n                                        placeholder=\"Enter Email\"\n                                        onChange={value => this.handleChange('email', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    {/* <TextField\n                                        id=\"username\"\n                                        label=\"Username\"\n                                        placeholder=\"Enter Username\"\n                                        onChange={value => this.handleChange('username', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    /> */}\n                \n                                    <TextField\n                                        id=\"password\"\n                                        label=\"Password\"\n                                        placeholder=\"Enter Password\"\n                                        onChange={value => this.handleChange('password', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"confirm_password\"\n                                        label=\"Confirm Password\"\n                                        placeholder=\"Enter Confirm\"\n                                        onChange={value => this.handleChange('confirm', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n{\n                                    !_.isEmpty(this.state.message) ? <Typography variant=\"button\" gutterBottom style={{ color: 'red' }}>\n                                            {this.state.message}\n                                        </Typography> : null\n                                    }\n\n                                    <Grid container>\n                                        <Grid item md={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showConfirm(true)} style={{ marginTop: 20 }}>\n                                                Register\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.showRegistration(false)} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    key={1}\n                    open={this.state.confirm}\n                    onClose={() => this.showConfirm(false)}\n                    onOk={() => this.submitForm()}\n                    title={'New User Confirmation'}\n                    message={'Are sure you want to save this user information?'}\n                    actions={[\n                        { actionTitle: 'Yes', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showConfirm(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nCMainLayout.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(CMainLayout)","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\n\nimport { RouteTo, ActOnBranch } from '../Utils/RouterAction'\nimport _ from 'lodash'\nimport CAppBar from \"./CAppBar\";\nimport { _tryLogout } from '../../rest/users.api'\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n   root: {\n      display: \"flex\"\n   },\n   drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n         width: drawerWidth,\n         flexShrink: 0\n      }\n   },\n   appBar: {\n      marginLeft: drawerWidth,\n      [theme.breakpoints.up(\"sm\")]: {\n         width: `calc(100% - ${drawerWidth}px)`\n      }\n   },\n   menuButton: {\n      marginRight: 20,\n      [theme.breakpoints.up(\"sm\")]: {\n         display: \"none\"\n      }\n   },\n   toolbar: theme.mixins.toolbar,\n   drawerPaper: {\n      width: drawerWidth\n   },\n   content: {\n      flexGrow: 1,\n      padding: theme.spacing.unit * 2\n   },\n   contentNoPads: {\n      flexGrow: 1,\n      padding: 0\n   }\n})\n\nclass CDrawerLayout extends React.Component {\n   state = {\n      mobileOpen: false,\n      pageTitle: ''\n   }\n   \n   componentDidMount(){\n      this.validateShouldTitle(this.props.location.pathname)\n   }\n\n   validateShouldTitle = path => {\n      switch(path){\n         case '/dashboard': \n            this.setState({ pageTitle: 'Dashboard' }); break\n         case '/dashboard/manage_clinics': \n            this.setState({ pageTitle: 'Manage Clinics' }); break\n         case '/dashboard/manage_users': \n            this.setState({ pageTitle: 'Manage Users' }); break\n         case '/dashboard/settings': \n            this.setState({ pageTitle: 'Settings' }); break \n      }\n   }\n\n   handleDrawerToggle = () => {\n      this.setState(state => ({ mobileOpen: !state.mobileOpen }));\n   }\n\n   goTo = path => {\n      switch(path){\n         case '/dashboard': \n            this.setState({ pageTitle: 'Dashboard' }); break\n         case '/dashboard/manage_clinics': \n            this.setState({ pageTitle: 'Manage Clinics' }); break\n         case '/dashboard/manage_users': \n            this.setState({ pageTitle: 'Manage Users' }); break\n         case '/dashboard/settings': \n            this.setState({ pageTitle: 'Settings' }); break     \n      }\n\n      RouteTo(this.props, path)\n   }\n\n   tryLogout = () => {\n      _tryLogout({}, data => {\n         ActOnBranch('clear')\n         this.goTo('/')\n      })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n      let contentClass = classes.content\n\n      if(this.props.unPad)\n         contentClass = classes.contentNoPads\n\n      const drawer = (\n         <div>\n            <div className={classes.toolbar} />\n            <List>\n               {\n                  _.map(this.props.drawers, data => {\n                     return (\n                        <ListItem button key={data.name} onClick={() => this.goTo(data.route)}>\n                           <ListItemIcon>\n                              {data.icon}\n                           </ListItemIcon>\n                           \n                           <ListItemText primary={data.name} />\n                        </ListItem>\n                     )\n                  })\n               }\n\n               {/* <ListItem button key={'Logout'} onClick={() => this.tryLogout()}>\n                  <ListItemIcon>\n                     <MailIcon />\n                  </ListItemIcon>\n                  \n                  <ListItemText primary={'Logout'} />\n               </ListItem> */}\n            </List>\n         </div>\n      )\n\n      return (\n         <div className={classes.root}>\n            <CssBaseline />\n            \n            {\n               !this.props.backType && !this.props.firstPage ? (\n                  <div>\n                     <CAppBar \n                        handleDrawerToggle={this.handleDrawerToggle} \n                        setTitle={this.state.pageTitle} \n                        routePath={this.props.location.pathname}\n                        logout={this.tryLogout}\n                        {...this.props}  \n                     />\n      \n                     <nav className={classes.drawer}>\n                        <Hidden smUp implementation=\"css\">\n                           <Drawer\n                              container={this.props.container}\n                              variant=\"temporary\"\n                              anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                              open={this.state.mobileOpen}\n                              onClose={this.handleDrawerToggle}\n                              classes={{\n                                 paper: classes.drawerPaper\n                              }}\n                           >\n                           {drawer}\n                           </Drawer>\n                        </Hidden>\n                        <Hidden xsDown implementation=\"css\">\n                           <Drawer\n                           classes={{\n                              paper: classes.drawerPaper\n                           }}\n                           variant=\"permanent\"\n                           open\n                           >\n                           {drawer}\n                           </Drawer>\n                        </Hidden>\n                     </nav>\n                  </div>\n               ) : (\n                  <div>\n                      <CAppBar \n                        backType\n                        goBack={() => this.props.history.goBack()}\n                        setTitle={this.state.pageTitle}\n                        routePath={this.props.location.pathname}\n                        logout={this.tryLogout}\n                     />\n                  </div>\n               )\n            }\n\n            <main className={contentClass}>\n               <div className={classes.toolbar} />\n               {this.props.children}\n            </main>\n         </div>\n      )\n   }\n}\n\nCDrawerLayout.propTypes = {\n   classes: PropTypes.object.isRequired,\n   container: PropTypes.object,\n   theme: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles, { withTheme: true })(CDrawerLayout)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Modal';\nimport Paper from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport _ from 'lodash'\n\nconst styles = theme => ({\n    paper: {\n      position: 'absolute',\n      width: theme.spacing.unit * 50,\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing.unit * 4,\n      outline: 'none',\n    },\n})\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50\n    const left = 50\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    }\n}\n\nclass CConfirm extends React.Component {\n  render() {\n    \n    const { classes } = this.props\n\n    return (\n        <Modal\n            open={this.props.open}\n            onClose={this.props.onClose}\n        >\n            <div style={getModalStyle()} className={classes.paper}>\n                <Typography variant=\"h6\" id=\"modal-title\">\n                    {this.props.title}\n                </Typography>\n                <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n                    {this.props.message}\n                </Typography>\n\n                <div style={{ marginTop: 10 }}>\n                    {\n                        _.map(this.props.actions, action => {\n                            return <Button \n                                size=\"small\" color={action.actionType || 'default'} \n                                onClick={action.action}\n                                style={{ marginRight: 10 }}>\n                                {action.actionTitle}\n                            </Button>\n                        })\n                    }\n                </div>\n\n            </div>\n        </Modal>\n    )\n  }\n}\n\nCConfirm.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nconst CConfirmWrapped = withStyles(styles)(CConfirm);\n\nexport default CConfirmWrapped","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport _ from 'lodash'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n      ...theme.mixins.gutters(),\n      paddingTop: theme.spacing.unit * 2,\n      paddingBottom: theme.spacing.unit * 2,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n})\n\nclass Dashboard extends React.Component {\n   state = {\n      dashboardData: []\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      this.setState({\n         dashboardData: [\n            { key: 'Clinics', value: 2 },\n            { key: 'Employees', value: 3 },\n            { key: 'Patients', value: 35 },\n         ]\n      })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <div className={classes.root}>\n            {\n               _.map(this.state.dashboardData, data => {\n                  return <Paper className={classes.root} elevation={1} style={{ marginBottom: 5 }}>\n                     <Typography variant=\"h5\" component=\"h3\">\n                        <strong>{data.value}</strong>\n                     </Typography>\n                     <Typography component=\"p\">\n                     {data.key}\n                     </Typography>\n                  </Paper>\n               })\n            }\n         </div>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(Dashboard)","import _ from 'lodash'\n\nexport const REGISTER_CLINIC = ['MAIN_OWNER']\nexport const VIEW_DASHBOARD = ['MAIN_OWNER']\n\nexport const CLINIC_LIST = ['MAIN_OWNER', 'DOCTOR', 'STAFF']\nexport const DELETE_CLINIC = ['MAIN_OWNER']\n\nexport const roleQualified = (roles) => {\n    let currentRole = localStorage.getItem(\"rx\")\n    return _.includes(roles, currentRole)\n}","import { get, post, destroy } from '../rest'\n\nexport let _getClinics = (callback = null) => {\n  get('/api/v1/clinics')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getClinics', e)\n    })\n}\n\nexport let _getClinicsOwn = (callback = null) => {\n  get('/api/v1/clinics/own')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getClinicsOwn', e)\n    })\n}\n\nexport let _createClinic = (data, callback = null) => {\n  post('/api/v1/clinic', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinic', e)\n    })\n}\n\nexport let _saveClinic = (data, callback = null) => {\n  post('/api/v1/clinic', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinic', e)\n    })\n}\n\nexport let _deleteClinic = (clinicId, callback = null) => {\n  destroy(`/api/v1/clinic/${clinicId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deleteClinic', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid, Button } from '@material-ui/core'\nimport { ClinicCard, ActionBar, ClinicForm } from 'components'\nimport * as rule from '../Utils/RoleAccessConfig'\n\nimport _ from 'lodash'\nimport { RouteTo } from '../Utils/RouterAction'\nimport { _getClinicsOwn, _deleteClinic } from '../../rest/clinic.api'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass ManageClinics extends React.Component {\n\n   state = {\n      data: [],\n      openClinicForm: false\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getClinicsOwn(data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   deleteClinic = id => {\n      _deleteClinic(id, () => {\n         this.fetchData()\n      })\n   }\n\n   onCardClick = item => {\n      this.goTo('/clinic/' + item.id)\n   }\n   \n   goTo = path => {\n      RouteTo(this.props, path)\n   }\n\n   addNewClinic = val => {\n      this.setState({ openClinicForm: val })\n   }\n   \n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <div>\n\n            {\n               rule.roleQualified(rule.REGISTER_CLINIC) ? <ActionBar style={{ marginBottom: 10 }}>\n                  <Button color=\"primary\" onClick={() => this.addNewClinic(true)}>\n                     Register a new Clinic\n                  </Button>\n               </ActionBar> : null\n            }\n            \n            <Grid style={{ flexDirection: 'row' }} container>\n               {\n                  !_.isEmpty(this.state.data) ? (\n                     _.map(this.state.data, clinic => {\n                        return (\n                           <Grid item lg={4} md={6} xs={12}>\n                              <ClinicCard \n                                 data={clinic} \n                                 onClick={() => this.onCardClick(clinic)} \n                                 onDelete={() => this.deleteClinic(clinic.id)} \n                              />\n                           </Grid>\n                        )\n                     })\n                  ) : <Typography style={{ fontSize: 30, color: 'gray' }}>No clinic(s)</Typography>\n               }   \n            </Grid>\n\n            {\n               rule.roleQualified(rule.REGISTER_CLINIC) ? <ClinicForm \n                  open={this.state.openClinicForm} \n                  closeForm={() => this.addNewClinic(false)} \n                  refreshList={() => this.fetchData()}   \n               /> : null\n            }\n\n         </div>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(ManageClinics)","import { get, post, destroy } from '../rest'\n\nexport let _getClinicUsers = (callback = null) => {\n  get('/api/v1/clinic_users')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getClinicUsers', e)\n    })\n}\n\nexport let _createClinicUser = (data, callback = null) => {\n  post('/api/v1/clinic_user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinicUser', e)\n    })\n}\n\nexport let _saveClinicUser = (data, callback = null) => {\n  post('/api/v1/clinic_user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinicUser', e)\n    })\n}\n\nexport let _deleteClinicUser = (clinic_userId, callback = null) => {\n  destroy(`/api/v1/clinic_user/${clinic_userId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deleteClinicUser', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport { ActionBar, UserForm, ClinicUserForm } from 'components'\nimport { _createUser, _getUsers, _deleteUser } from '../../rest/users.api'\nimport { _deleteClinicUser } from '../../rest/clinic_user.api'\n\nimport { CConfirm } from 'components'\n\nimport _ from 'lodash'\nimport { truncateSync } from \"fs\";\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   heading: {\n      textTransform: 'uppercase'\n   }\n})\n\nclass ManageUsers extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      showRegistration: false,\n      showUserRole: false,\n      deleteRoleOpen: false,\n      deleteUserOpen: false,\n      selectedUserID: '',\n      selectedRoleID: ''\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getUsers(data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   showRegistration = val => {\n      this.setState({ showRegistration: val })\n   }\n\n   showUserRole = (val, userID) => {\n      this.setState({ showUserRole: val, selectedUserID: userID })\n   }\n\n   onDeleteRole = (val, roleID) => {\n      this.setState({ deleteRoleOpen: val, selectedRoleID: roleID })\n   }\n\n   onDeleteUser = (val, userID) => {\n      this.setState({ deleteUserOpen: val, selectedUserID: userID })\n   }\n\n   deleteRoleSuccess = () => {\n      _deleteClinicUser(this.state.selectedRoleID, () => {\n         this.fetchData()\n         this.onDeleteRole(false, '')\n      })\n   }\n\n   deleteUserSuccess = () => {\n      _deleteUser(this.state.selectedUserID, () => {\n         this.fetchData()\n         this.onDeleteUser(false, '')\n      })\n   }\n\n   render() {\n      const { classes, theme } = this.props\n      const { expanded } = this.state\n\n      return (\n         <div className={classes.root}>\n\n            <ActionBar style={{ marginBottom: 10 }}>\n               <Button color=\"primary\" onClick={() => this.showRegistration(true)}>\n                  Register a User\n               </Button>\n            </ActionBar>\n\n            {\n               _.map(this.state.data, (record, idx) => {\n                  return <ExpansionPanel>\n                     <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.heading}><strong>{record.user.lastname}, {record.user.firstname} {record.user.middlename} ({record.user.role})</strong></Typography>\n                     </ExpansionPanelSummary>\n                     <ExpansionPanelDetails>\n                        <Grid container spacing={8}>\n                           <Grid item md={6} style={{ width: '100%' }}>\n                              <Paper>\n                                 <Table>\n                                    <TableBody>\n                                       <TableRow>\n                                          <TableCell>\n                                             <strong>Email</strong>\n                                          </TableCell>\n                                          <TableCell>{record.user.email}</TableCell>\n                                       </TableRow>\n                                       <TableRow>\n                                          <TableCell>\n                                          <strong>Birthdate</strong>\n                                          </TableCell>\n                                          <TableCell>{record.user.dob}</TableCell>\n                                       </TableRow>\n                                       <TableRow>\n                                          <TableCell>\n                                          <strong>Contact</strong>\n                                          </TableCell>\n                                          <TableCell>{record.user.contact_no}</TableCell>\n                                       </TableRow>\n                                    </TableBody>\n                                 </Table>\n                              </Paper>\n                           </Grid>\n                           <Grid item md={6} style={{ width: '100%' }}>\n                              <Paper>\n                                 <Table>\n                                    <TableBody>\n\n                                       {\n                                          _.map(record.roles, role => {\n                                             return <TableRow>\n                                             <TableCell>\n                                                <strong>{role.clinic.clinic_name}</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}>\n                                                <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteRole(true, role.id)}>\n                                                   REMOVE\n                                                </Button>\n                                             </TableCell>\n                                          </TableRow>\n                                          })\n                                       }\n                                       \n                                    </TableBody>\n                                 </Table>\n                              </Paper>\n                           </Grid>\n                        </Grid>\n\n                     </ExpansionPanelDetails>\n                     <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                        {\n                           record.user.role !== 'MAIN_OWNER' ? <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteUser(true, record.user.id)}>\n                              DELETE USER\n                           </Button> : null\n                        }\n                        \n\n                        <Button size=\"small\" color=\"primary\" onClick={() => this.showUserRole(true, record.user.id)}>\n                           Assign to a clinic\n                        </Button>\n                     </ExpansionPanelActions>\n                  </ExpansionPanel>\n               })\n            }\n            \n            <UserForm \n               open={this.state.showRegistration} \n               closeForm={() => this.showRegistration(false)} \n               refreshList={() => this.fetchData()}   \n            />\n\n            <ClinicUserForm \n               open={this.state.showUserRole} \n               closeForm={() => this.showUserRole(false)}\n               userID={this.state.selectedUserID}\n               refreshList={() => this.fetchData()}   \n            />\n\n            <CConfirm\n               open={this.state.deleteRoleOpen}\n               onClose={() => this.onDeleteRole(false, '')}\n               onOk={() => this.onDeleteRole(false, '')}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteRoleSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteRole(false, ''), actionType: 'secondary' }\n               ]}\n            />\n\n            <CConfirm\n               open={this.state.deleteUserOpen}\n               onClose={() => this.deleteCardOpen(false)}\n               onOk={() => this.deleteCardOpen(false)}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteUserSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteUser(false, ''), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nManageUsers.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(ManageUsers)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\nimport _ from 'lodash'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass Settings extends React.Component {\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <div className={classes.root}>\n\n         </div>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(Settings)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport { Appointments, Patients } from 'components'\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 15 }}>\n      {props.children}\n    </Typography>\n  )\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  }\n})\n\nclass ClinicDashboard extends React.Component {\n  state = {\n    value: 0\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Tabs value={value} onChange={this.handleChange}>\n            <Tab label=\"Patients\" />\n            {/* <Tab label=\"Appointments\" /> */}\n          </Tabs>\n        </AppBar>\n        {value === 0 && <TabContainer>\n            <Patients {...this.props} />\n        </TabContainer>}\n        {value === 1 && <TabContainer>\n            <Appointments {...this.props} />\n        </TabContainer>}\n      </div>\n    );\n  }\n}\n\nClinicDashboard.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(ClinicDashboard)","import { get, post, destroy } from '../rest'\n\nexport let _getPatient = (patientID, callback = null) => {\n  get('/api/v1/patient/' + patientID)\n    .then(response => {\n      console.log(response)\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatient', e)\n    })\n}\n\nexport let _getPatients = (search = '', callback = null) => {\n  get('/api/v1/patients', { search })\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatients', e)\n    })\n}\n\nexport let _getPatientsByClinic = (clinicID, search = '', callback = null) => {\n  get(`/api/v1/patients/by_clinic/${clinicID}?search=${search}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientsByClinic', e)\n    })\n}\n\nexport let _createPatient = (data, callback = null) => {\n  post('/api/v1/patient', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _savePatient', e)\n    })\n}\n\nexport let _savePatient = (data, callback = null) => {\n  post('/api/v1/patient', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _savePatient', e)\n    })\n}\n\nexport let _deletePatient = (patientId, callback = null) => {\n  destroy(`/api/v1/patient/${patientId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deletePatient', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\nimport DoneIcon from '@material-ui/icons/Done';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase'\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\n\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\n\nimport { RouteTo } from '../Utils/RouterAction'\nimport { PatientForm, CConfirm } from 'components'\nimport { _getPatientsByClinic } from '../../rest/patient.api'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   searchRoot: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   input: {\n      marginLeft: 8,\n      flex: 1,\n      width: '100%'\n   },\n   iconButton: {\n      padding: 10,\n   },\n   avatar: {\n      margin: 10,\n   },\n   orangeAvatar: {\n      color: '#fff',\n      backgroundColor: deepOrange[500],\n   },\n   purpleAvatar: {\n      color: '#fff',\n      backgroundColor: deepPurple[500],\n   },\n})\nfunction ListItemLink(props) {\n   return <ListItem button component=\"a\" {...props} />;\n}\n \nclass Patients extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      openPatientForm: false,\n      search: ''\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   searchPatient = search => {\n      this.setState({ search: search.target.value }, () => this.fetchData())\n   }\n\n   fetchData = () => {\n      _getPatientsByClinic(this.props.match.params.clinicID, this.state.search, data => {\n         this.setState({ data })\n      })\n   }\n\n   openPatientForm = val => {\n      this.setState({ openPatientForm: val })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   patientSelect = record => {\n      this.goTo('/patient/' + record.id)\n   }\n\n   goTo = path => {\n      RouteTo(this.props, path)\n   }\n\n   render() {\n      const { classes, theme } = this.props\n      const { expanded } = this.state\n      \n      return (\n         <div className={classes.root}>\n            <Grid container>\n               <Grid item md={10} xs={8}>\n                  <Paper className={classes.searchRoot} style={{ marginBottom: 10, paddingLeft: 10 }}>\n                     <InputBase className={classes.input} placeholder=\"Search patient\" onChange={val => this.searchPatient(val)} />\n                  </Paper>\n               </Grid>\n               <Grid item md={2} xs={4} style={{ paddingLeft: 10 }}>\n                  <Button variant=\"contained\" color=\"primary\" style={{ width: '100%' }} onClick={() => this.openPatientForm(true)}>ADD PATIENT</Button>\n               </Grid>\n            </Grid>\n\n            <List component=\"nav\">\n               {\n                  _.map(this.state.data, (record, idx) => {\n                     let avatarClass = record.gender === 'M' ? classes.purpleAvatar : classes.orangeAvatar\n                     \n                     return <ListItem button style={{ paddingLeft: 0 }} onClick={() => this.patientSelect(record)}>\n                        <ListItemIcon>\n                           <Avatar className={avatarClass}>{record.gender[0]}</Avatar>\n                        </ListItemIcon>\n                        <ListItemText primary={`${record.lastname}, ${record.firstname} ${record.middlename}`} />\n                     </ListItem>\n                  })\n               }\n            </List>\n\n            <PatientForm \n               open={this.state.openPatientForm} \n               closeForm={() => this.openPatientForm(false)}\n               refreshList={() => this.fetchData()}\n               {...this.props}\n            />\n            \n         </div>\n      )\n   }\n}\n\nPatients.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(Patients)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\nimport DoneIcon from '@material-ui/icons/Done';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   searchRoot: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   input: {\n      marginLeft: 8,\n      flex: 1,\n      width: '100%'\n   },\n   iconButton: {\n      padding: 10,\n   },\n})\n\nclass Appointments extends React.Component {\n   state = {\n      expanded: 0,\n      data: []\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = [\n         { id: 3, \n            employee_name: 'Micah Lumaad', \n            email: 'micahlumaad@gmail.com', \n            dob: '05/13/1990', \n            gender: 'male', \n            contact: '+639255055519',\n            clinics: [\n               { id: 1, clinic_name: 'Ace Dermatology', role: 'SF' },\n               { id: 2, clinic_name: 'Ace Dental Clinic', role: 'SF' },\n         ]},\n         { id: 1, \n            employee_name: 'Ace Jordan Lumaad', \n            email: 'acelumaad@gmail.com', \n            dob: '03/13/1990', \n            gender: 'male',\n            contact: '+639255055519',\n            clinics: [\n               { id: 1, clinic_name: 'Ace Dermatology', role: 'OR' },\n               { id: 2, clinic_name: 'Ace Dermatology', role: 'DR' },\n               { id: 3, clinic_name: 'Ace Dental Clinic', role: 'SF' },\n         ]},\n         { id: 2, \n            employee_name: 'Gwen Lumaad', \n            email: 'gwenlumaad@gmail.com', \n            dob: '01/13/1990', \n            gender: 'female', \n            contact: '+639255055519',\n            clinics: [\n               { id: 1, clinic_name: 'Ace Dermatology', role: 'DR' },\n               { id: 2, clinic_name: 'Ace Dental Clinic', role: 'DR' },\n         ]},\n\n      ]\n\n      this.setState({\n         data\n      })\n   }\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   render() {\n      const { classes, theme } = this.props\n      const { expanded } = this.state\n\n      return (\n         <div className={classes.root}>\n\n            <Paper className={classes.searchRoot} style={{ marginBottom: 10, paddingLeft: 10 }}>\n               <InputBase className={classes.input} placeholder=\"Search patients\" />\n               <IconButton className={classes.iconButton} aria-label=\"Search\">\n                  <SearchIcon />\n               </IconButton>\n            </Paper>\n\n            {\n               _.map(this.state.data, (record, idx) => {\n                  return <ExpansionPanel>\n                     <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.heading}><strong>{record.employee_name}</strong></Typography>\n                     </ExpansionPanelSummary>\n                     <ExpansionPanelDetails style={{ padding: 0 }}>\n                        <Table>\n                           <TableBody>\n                              <TableRow>\n                                 <TableCell>\n                                    <strong>Email</strong>\n                                 </TableCell>\n                                 <TableCell>{record.email}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                 <TableCell>\n                                 <strong>Birthdate</strong>\n                                 </TableCell>\n                                 <TableCell>{record.dob}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                 <TableCell>\n                                 <strong>Gender</strong>\n                                 </TableCell>\n                                 <TableCell>{record.gender}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                 <TableCell>\n                                 <strong>Contact</strong>\n                                 </TableCell>\n                                 <TableCell>{record.contact}</TableCell>\n                              </TableRow>\n                           </TableBody>\n                        </Table>\n                     </ExpansionPanelDetails>\n                     <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                        <Button size=\"small\" color=\"primary\">EDIT</Button>\n                        <Button size=\"small\" color=\"secondary\">\n                           REMOVE\n                        </Button>\n                     </ExpansionPanelActions>\n                  </ExpansionPanel>\n               })\n            }\n            \n         </div>\n      )\n   }\n}\n\nAppointments.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(Appointments)","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport { _getPatient } from '../../rest/patient.api'\n\nimport { PatientInformation, PatientHistory, PatientVaccination } from 'components'\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\">\n      {props.children}\n    </Typography>\n  )\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  }\n})\n\nclass PatientDashboard extends React.Component {\n  state = {\n    value: 0,\n    patient: {}\n  }\n\n  componentDidMount(){\n    this.fetchPatient()\n  }\n\n  fetchPatient = () => {\n    _getPatient(this.props.match.params.patientID, data => {\n      this.fetchPatientSuccess(data)\n    })\n  }\n\n  fetchPatientSuccess = patient => {\n    this.setState({ patient })\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  }\n\n  render() {\n      const { classes } = this.props;\n      const { value } = this.state;\n\n      let patient = {\n         id: this.state.patient.id,\n         patient_name: this.state.patient.fullname,\n         details: this.state.patient.gender + ' | ' + this.state.patient.dob,\n         avatar: 'https://material-ui.com/static/images/avatar/1.jpg',\n      }\n\n    return (\n      <div className={classes.root}>\n\n        <div>\n          <Fragment key={patient.id}>\n              <ListItem button>\n                <Avatar alt=\"Profile Picture\" src={patient.avatar} />\n                <ListItemText primary={patient.patient_name} secondary={patient.details} />\n              </ListItem>\n          </Fragment>\n          <AppBar position=\"static\">\n              <Tabs value={value} onChange={this.handleChange}>\n                <Tab label=\"History\" />\n                {/* <Tab label=\"Medications\" /> */}\n                <Tab label=\"Vaccinations\" />\n              </Tabs>\n          </AppBar>\n        </div>\n        <div>\n          {value === 0 && <TabContainer>\n                <PatientHistory {...this.props} />\n          </TabContainer>}\n          {value === 1 && <TabContainer>\n                <PatientVaccination {...this.props} />\n          </TabContainer>}\n          {value === 2 && <TabContainer>\n                <PatientInformation {...this.props} />\n          </TabContainer>}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nPatientDashboard.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(PatientDashboard)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { TextField } from '@material-ui/core'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   }\n})\n\nclass PatientInformation extends React.Component {\n   state = {\n      expanded: 0,\n      data: []\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root} style={{ padding: 15 }}>\n            <form noValidate autoComplete=\"off\">\n\n            </form>\n         </div>\n      )\n   }\n}\n\nPatientInformation.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientInformation)","import { get, post, destroy } from '../rest'\n\nexport let _getPatientHistories = (callback = null) => {\n  get('/api/v1/patient_histories')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientHistories', e)\n    })\n}\n\nexport let _getPatientHistoriesByPatient = (patientID, callback = null) => {\n  get(`/api/v1/patient_history/patient/${patientID}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientHistories', e)\n    })\n}\n\nexport let _getPatientHistory = (id, callback = null) => {\n  get(`/api/v1/patient_history/${id}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientHistory', e)\n    })\n}\n\nexport let _createPatientHistory = (data, callback = null) => {\n  post('/api/v1/patient_history', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _createPatientHistory', e)\n    })\n}\n\nexport let _deletePatientHistory = (patient_historyId, callback = null) => {\n  destroy(`/api/v1/patient_history/${patient_historyId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deletePatientHistory', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { ActionBar, PatientHistoryForm } from 'components'\nimport { _getPatientHistoriesByPatient, _deletePatientHistory } from '../../rest/patient_history.api'\n\nimport { CConfirm } from 'components'\n\nimport moment from 'moment'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   heading: {\n      textTransform: 'uppercase'\n   }\n})\n\nclass PatientHistory extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      openDataForm: false,\n      selectedDataID: ''\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getPatientHistoriesByPatient(this.props.match.params.patientID, data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   openDataForm = val => {\n      this.setState({ openDataForm: val })\n   }\n\n   onDeleteData = (val, dataID) => {\n      this.setState({ confirmDelete: val, selectedDataID: dataID })\n   }\n\n   deleteDataSuccess = () => {\n      _deletePatientHistory(this.state.selectedDataID, () => {\n         this.fetchData()\n         this.onDeleteData(false, '')\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root}>\n\n            <ActionBar style={{ marginBottom: 10 }}>\n               <Button color=\"primary\" onClick={() => this.openDataForm(true)}>\n                  Add New History Record\n               </Button>\n            </ActionBar>\n\n            {\n               _.map(this.state.data, (record, idx) => {\n                  return <ExpansionPanel>\n                     <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.heading}><strong>{moment(record.visit_datetime).format(\"MM/DD/YYYY\")} - {record.chief_complaint}</strong></Typography>\n                     </ExpansionPanelSummary>\n                     <ExpansionPanelDetails>\n                        <Grid container spacing={8}>\n                           <Grid item md={12} style={{ width: '100%' }}>\n                                 <Grid container>\n                                    <Grid item md={6} xs={12} style={{ paddingRight: 5 }}>\n                                       <Paper style={{ marginBottom: 10 }}>\n                                          <Table>\n                                             <TableBody>\n                                                <TableRow>\n                                                   <TableCell>\n                                                      <strong>Chief Complaint</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.chief_complaint}</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>History of Illness</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.history_present_illness}</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Physical Exam</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.physical_exam}</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Diagnosis</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.diagnosis}</TableCell>\n                                                </TableRow>\n                                             </TableBody>\n                                          </Table>\n                                       </Paper>\n                                    </Grid>\n                                    <Grid item md={6} xs={12} style={{ paddingLeft: 5 }}>\n                                       <Paper>\n                                          <Table>\n                                             <TableBody>\n                                                <TableRow>\n                                                   <TableCell>\n                                                      <strong>Weight/Height</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.init_weight || '--'} kg / {record.init_height || '--'} cm</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Temperature</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.init_temp} C</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Pulse</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.init_pulse_rate} bpm</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Respiratory</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.init_resp_rate} bpm</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Respiratory</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.init_resp_rate} bpm</TableCell>\n                                                </TableRow>\n                                             </TableBody>\n                                          </Table>\n                                       </Paper>\n                                    </Grid>\n                                 </Grid>\n                           </Grid>\n                        </Grid>\n                     </ExpansionPanelDetails>\n                     <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                        <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteData(true, record.id)}>\n                           DELETE RECORD\n                        </Button>\n                     </ExpansionPanelActions>\n                  </ExpansionPanel>\n               })\n            }\n            \n            <PatientHistoryForm \n               open={this.state.openDataForm} \n               closeForm={() => this.openDataForm(false)} \n               refreshList={() => this.fetchData()}\n               dataID={this.props.match.params.patientID}\n            />\n\n            <CConfirm\n               open={this.state.confirmDelete}\n               onClose={() => this.onDeleteData(false, '')}\n               onOk={() => this.onDeleteData(false, '')}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteDataSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteData(false, ''), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nPatientHistory.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientHistory)","import { get, post, destroy } from '../rest'\n\nexport let _getPatientVaccinations = (callback = null) => {\n  get('/api/v1/patient_vaccinations')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientVaccinations', e)\n    })\n}\n\nexport let _getPatientVaccinationsByPatient = (patientID, callback = null) => {\n  get(`/api/v1/patient_vaccination/patient/${patientID}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientVaccinations', e)\n    })\n}\n\nexport let _getPatientVaccination = (id, callback = null) => {\n  get(`/api/v1/patient_vaccination/${id}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientVaccination', e)\n    })\n}\n\nexport let _createPatientVaccination = (data, callback = null) => {\n  post('/api/v1/patient_vaccination', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _createPatientVaccination', e)\n    })\n}\n\nexport let _deletePatientVaccination = (patient_vaccinationId, callback = null) => {\n  destroy(`/api/v1/patient_vaccination/${patient_vaccinationId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deletePatientVaccination', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { ActionBar, PatientVaccinationForm } from 'components'\nimport { _getPatientVaccinationsByPatient, _deletePatientVaccination } from '../../rest/patient_vaccination.api'\n\nimport { CConfirm } from 'components'\n\nimport moment from 'moment'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   heading: {\n      textTransform: 'uppercase'\n   }\n})\n\nclass PatientVaccination extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      openDataForm: false,\n      selectedDataID: ''\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getPatientVaccinationsByPatient(this.props.match.params.patientID, data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   openDataForm = val => {\n      this.setState({ openDataForm: val })\n   }\n\n   onDeleteData = (val, dataID) => {\n      this.setState({ confirmDelete: val, selectedDataID: dataID })\n   }\n\n   deleteDataSuccess = () => {\n      _deletePatientVaccination(this.state.selectedDataID, () => {\n         this.fetchData()\n         this.onDeleteData(false, '')\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root}>\n\n            <ActionBar style={{ marginBottom: 10 }}>\n               <Button color=\"primary\" onClick={() => this.openDataForm(true)}>\n                  Add New Vaccination Record\n               </Button>\n            </ActionBar>\n\n            {\n               _.map(this.state.data, (record, idx) => {\n\n                  let vaccinationRecord = record.vaccination_details ? JSON.parse(record.vaccination_details) : []\n                  let vaccineString = '';\n\n                  if(!_.isEmpty(vaccinationRecord)){   \n                     vaccinationRecord.forEach((vRec, i) => {\n                        if(i == 0)\n                           vaccineString = vaccineString + vRec.vaccine + '(' + vRec.route + ')'\n                        else\n                           vaccineString = vaccineString + ', ' + vRec.vaccine + '(' + vRec.route + ')'\n                     })\n                  }\n\n                  return <ExpansionPanel>\n                     <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.heading}><strong>{moment(record.vaccination_date).format(\"MM/DD/YYYY\")} - {vaccineString}</strong></Typography>\n                     </ExpansionPanelSummary>\n                     <ExpansionPanelDetails>\n                        <Grid container spacing={8}>\n                           <Grid item md={12} style={{ width: '100%' }}>\n                                 <Grid container>\n                                    <Grid item md={6} xs={12} style={{ paddingRight: 5 }}>\n                                       <Paper style={{ marginBottom: 10 }}>\n                                          <Table>\n                                             <TableBody>\n                                                <TableRow>\n                                                   <TableCell>\n                                                      <strong>Vaccination Date</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.vaccination_date}</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Vaccination Notes</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.vaccination_notes}</TableCell>\n                                                </TableRow>\n                                                <TableRow>\n                                                   <TableCell>\n                                                   <strong>Next Vaccination Schedule</strong>\n                                                   </TableCell>\n                                                   <TableCell>{record.next_vaccination_schedule}</TableCell>\n                                                </TableRow>\n                                             </TableBody>\n                                          </Table>\n                                       </Paper>\n                                    </Grid>\n                                    <Grid item md={6} xs={12} style={{ paddingLeft: 5 }}>\n                                       <Paper>\n                                       <Table>\n                                                <TableBody>\n                                                    <TableRow>\n                                                        <TableCell>\n                                                            <strong>Vaccine</strong>\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <strong>Route</strong>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                    {\n                                                        _.map(vaccinationRecord, data => {\n                                                            return <TableRow>\n                                                                <TableCell>\n                                                                    {data.vaccine}\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    {data.route}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        })\n                                                    }\n                                                </TableBody>\n                                            </Table>\n                                       </Paper>\n                                    </Grid>\n                                 </Grid>\n                           </Grid>\n                        </Grid>\n                     </ExpansionPanelDetails>\n                     <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                        <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteData(true, record.id)}>\n                           DELETE RECORD\n                        </Button>\n                     </ExpansionPanelActions>\n                  </ExpansionPanel>\n               })\n            }\n            \n            <PatientVaccinationForm \n               open={this.state.openDataForm} \n               closeForm={() => this.openDataForm(false)} \n               refreshList={() => this.fetchData()}\n               dataID={this.props.match.params.patientID}\n            />\n\n            <CConfirm\n               open={this.state.confirmDelete}\n               onClose={() => this.onDeleteData(false, '')}\n               onOk={() => this.onDeleteData(false, '')}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteDataSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteData(false, ''), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nPatientVaccination.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientVaccination)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\n\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { TextField } from '@material-ui/core'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n      margin: theme.spacing.unit,\n   },\n   card: {\n      minWidth: 275,\n   },\n   title: {\n      fontSize: 14,\n   },\n})\n\nclass PatientMedications extends React.Component {\n   state = {\n      expanded: 0,\n      data: []\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = { \n         date: '03/13/1990',\n         id: 1, \n         chief_complaint: 'Fever, cough', \n         hpi: 'The quick little brown fox jumps over the back of the lazy dog', \n         physical_exam: 'The quick little brown fox jumps over the back of the lazy dog', \n         diagnosis: 'The quick little brown fox jumps over the back of the lazy dog',\n      }\n\n      this.setState({\n         data\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root} style={{ padding: 15 }}>\n            <form noValidate autoComplete=\"off\">\n               <Grid container spacing={16}>\n                  <Grid item md={6} xs={12}>\n                     <Card className={classes.card}>\n                        <CardContent>\n                           <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                              Available Medications\n                           </Typography>\n                        </CardContent>\n                     </Card>\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                     <Card className={classes.card} fullWidth>\n                        <CardContent>\n                           <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                              Prescriptions\n                           </Typography>\n                           \n                        </CardContent>\n                     </Card>\n                  </Grid>\n               </Grid>\n            </form>\n         </div>\n      )\n   }\n}\n\nPatientMedications.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientMedications)","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { CConfirm } from 'components'\n\nconst styles = {\n  card: {\n    width: '99%',\n    padding: 5,\n    marginLeft: 5,\n    marginBottom: 5,\n    marginRight: 5\n  },\n  media: {\n    objectFit: 'cover',\n  },\n}\n\nclass ClinicCard extends React.Component {\n   \n   state = {\n      deleteOpen: false\n   }\n\n   deleteCardOpen = val => {\n      this.setState({ deleteOpen: val })\n   }\n\n   onDelete = () => {\n      this.props.onDelete()\n      this.deleteCardOpen(false)\n   }\n\n   render(){\n\n      const { classes } = this.props\n\n      return (\n         <div>\n            <Card className={classes.card}>\n            <CardActionArea onClick={() => this.props.onClick()}>\n\n               <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                     {this.props.data.clinic_name || 'No clinic name'}\n                  </Typography>\n                  <Typography component=\"p\">\n                     {this.props.data.clinic_address || 'Address not specified'}\n                  </Typography>\n                  <Typography component=\"p\">\n                     {this.props.data.clinic_contact || 'No contact number specified'}\n                  </Typography>\n               </CardContent>\n            </CardActionArea>\n            <CardActions>\n               {/* <Button size=\"small\" color=\"primary\">\n                  EDIT\n               </Button> */}\n               <Button size=\"small\" color=\"secondary\" onClick={() => this.deleteCardOpen(true)}>\n                  REMOVE\n               </Button>\n            </CardActions>\n            </Card>\n     \n            <CConfirm\n               open={this.state.deleteOpen}\n               onClose={() => this.deleteCardOpen(false)}\n               onOk={() => this.deleteCardOpen(false)}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete ${this.props.data.clinic_name}?`}\n               actions={[\n                  { actionTitle: 'Delete', action: () => this.onDelete(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.deleteCardOpen(false), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nClinicCard.propTypes = {\n   classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(ClinicCard)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { CConfirm } from 'components'\nimport { _createClinic } from '../../rest/clinic.api'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass ClinicForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    submitForm = () => {\n        _createClinic(this.state.form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        })\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n\n        this.setState({\n            form\n        })\n    }\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <Modal\n                open={this.props.open}\n                onClose={this.handleClose}\n            >\n                <div style={getModalStyle()} className={classes.paper}>\n                    <Typography variant=\"h6\" id=\"modal-title\" style={{ marginBottom: 20 }}>\n                        Add New Clinic Form\n                    </Typography>\n\n                    <form noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"clinic_name\"\n                            label=\"Clinic Name\"\n                            placeholder=\"Enter name of clinic\"\n                            fullWidth\n                            margin=\"dense\"\n                            onChange={val => this.handleChange('clinic_name', val)}\n                            variant=\"outlined\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <TextField\n                            id=\"clinicaddress\"\n                            label=\"Clinic Address\"\n                            placeholder=\"Enter Address of Clinic\"\n                            onChange={val => this.handleChange('clinic_address', val)}\n                            fullWidth\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <TextField\n                            id=\"cliniccontact\"\n                            label=\"Clinic Contact No\"\n                            placeholder=\"Enter contact number of clinic\"\n                            onChange={val => this.handleChange('clinic_contact', val)}\n                            fullWidth\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <Grid container>\n                            <Grid item md={6} xs={6}>\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                    Submit Form\n                                </Button>\n                            </Grid>\n                            <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                    Cancel\n                                </Button>\n                            </Grid>\n                        </Grid>\n\n                        <CConfirm\n                            open={this.state.confirm}\n                            onClose={() => this.showPopup(false)}\n                            title={'Add New Clinic'}\n                            message={'Are sure you want to save this clinic information?'}\n                            actions={[\n                                { actionTitle: 'Yes', action: () => this.submitForm(), actionType: 'primary' },\n                                { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                            ]}\n                        />\n\n                    </form>\n                </div>\n            </Modal>\n        )\n    }\n}\n\nClinicForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst ClinicFormWrapped = withStyles(styles)(ClinicForm)\n\nexport default ClinicFormWrapped","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport { CConfirm } from 'components'\nimport { _createUser, _getUsers, _deleteUser } from '../../rest/users.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass UserForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    submitForm = () => {\n        _createUser(this.state.form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        }, false)\n    }\n    handleDateChange = (field, e) => {\n        let form = this.state.form\n        form[field] = moment(e).format(\"MM/DD/YYYY\")\n        \n        this.setState({\n           form\n        })\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n        \n        this.setState({\n            form\n        })\n    }\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    User Registration Form\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <Grid container spacing={16}>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"lastname\"\n                                                label=\"Lastname\"\n                                                placeholder=\"Enter Lastname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('lastname', value)}\n                                                required={true}\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"firstname\"\n                                                label=\"Firstname\"\n                                                placeholder=\"Enter Firstname\"\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                onChange={value => this.handleChange('firstname', value)}\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"middlename\"\n                                                label=\"Middlename\"\n                                                placeholder=\"Enter Middlename\"\n                                                onChange={value => this.handleChange('middlename', value)}\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n                                    <DatePicker\n                                        keyboard\n                                        label=\"Birthdate\"\n                                        format={\"MM/DD/YYYY\"}\n                                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                                        mask={value =>\n                                        // handle clearing outside if value can be changed outside of the component\n                                        value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                        }\n                                        value={this.state.form.visit_datetime}\n                                        onChange={value => this.handleDateChange('dob', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                        shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"contact\"\n                                        label=\"Contact Number\"\n                                        placeholder=\"Enter Contact Number\"\n                                        onChange={value => this.handleChange('contact_no', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"email\"\n                                        label=\"Email\"\n                                        placeholder=\"Enter Email\"\n                                        onChange={value => this.handleChange('email', value)}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"password\"\n                                        label=\"Password\"\n                                        placeholder=\"Enter Password\"\n                                        onChange={value => this.handleChange('password', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"confirm_password\"\n                                        label=\"Confirm Password\"\n                                        placeholder=\"Enter Confirm\"\n                                        onChange={value => this.handleChange('confirm', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                    \n                                    <TextField\n                                        id=\"role\"\n                                        select\n                                        label=\"Role\"\n                                        onChange={value => this.handleChange('role', value)}\n                                        value={this.state.form.role}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n                                        <MenuItem value={'DOCTOR'}>DOCTOR</MenuItem>\n                                        <MenuItem value={'STAFF'}>STAFF</MenuItem>\n                                    </TextField>\n\n                                    <Grid container>\n                                        <Grid item md={6} xs={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Register\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'New User Confirmation'}\n                    message={'Are sure you want to save this user information?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nUserForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst UserFormWrapped = withStyles(styles)(UserForm)\n\nexport default UserFormWrapped","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport { CConfirm } from 'components'\nimport { _createUser, _getUsers, _deleteUser, _getDoctorsByClinic } from '../../rest/users.api'\nimport { _createPatient } from '../../rest/patient.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\n\nimport _ from 'lodash'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass PatientForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false,\n        doctors: []\n    }\n\n    componentDidMount(){\n        this.fetchDoctors()\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    fetchDoctors = () => {\n        _getDoctorsByClinic(this.props.match.params.clinicID, doctors => {\n            this.setState({ doctors })\n        })\n    }\n\n    submitForm = () => {\n        let form = this.state.form;\n\n        form['clinic'] = this.props.match.params.clinicID;\n\n        _createPatient(form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        })\n    }\n    \n    handleDateChange = (field, e) => {\n        let form = this.state.form\n        form[field] = moment(e).format(\"MM/DD/YYYY\")\n        \n        this.setState({\n           form\n        })\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n        \n        this.setState({\n            form\n        })\n    }\n    \n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    New Patient Form\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <Grid container spacing={16}>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"lastname\"\n                                                label=\"Lastname\"\n                                                placeholder=\"Enter Lastname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('lastname', value)}\n                                                required={true}\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"firstname\"\n                                                label=\"Firstname\"\n                                                placeholder=\"Enter Firstname\"\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                onChange={value => this.handleChange('firstname', value)}\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"middlename\"\n                                                label=\"Middlename\"\n                                                placeholder=\"Enter Middlename\"\n                                                onChange={value => this.handleChange('middlename', value)}\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n                                    <DatePicker\n                                        keyboard\n                                        label=\"Birthdate\"\n                                        format={\"MM/DD/YYYY\"}\n                                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                                        mask={value =>\n                                        // handle clearing outside if value can be changed outside of the component\n                                        value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                        }\n                                        value={this.state.form.visit_datetime}\n                                        onChange={value => this.handleDateChange('dob', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                        shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"gender\"\n                                        select\n                                        label=\"Gender\"\n                                        onChange={value => this.handleChange('gender', value)}\n                                        value={this.state.form.gender}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n                                        <MenuItem value={'MALE'}>MALE</MenuItem>\n                                        <MenuItem value={'FEMALE'}>FEMALE</MenuItem>\n                                    </TextField>\n                                    \n                                    <TextField\n                                        id=\"contact_no\"\n                                        label=\"Contact Number\"\n                                        placeholder=\"Enter Contact Number\"\n                                        onChange={value => this.handleChange('contact_no', value)}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"doctor\"\n                                        select\n                                        label=\"Attending Physician\"\n                                        onChange={value => this.handleChange('doctor', value)}\n                                        value={this.state.form.doctor}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n                                        \n                                        {\n                                            _.map(this.state.doctors, doctor => {\n                                                return <MenuItem value={doctor.id}>Dr. {doctor.lastname}, {doctor.firstname}</MenuItem>\n                                            })\n                                        }\n                                        \n                                    </TextField>\n\n                                    <Grid container>\n                                        <Grid item md={6} xs={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Save Patient\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'New Patient Confirmation'}\n                    message={'Are sure you want to save this patient information?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n\n            </div>\n        )\n    }\n}\n\nPatientForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst PatientFormWrapped = withStyles(styles)(PatientForm)\n\nexport default PatientFormWrapped","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Modal from '@material-ui/core/Modal'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { CConfirm } from 'components'\nimport { _createClinicUser } from '../../rest/clinic_user.api'\nimport { _getClinics, _getClinicsOwn } from '../../rest/clinic.api'\nimport _ from 'lodash'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass ClinicUserForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false,\n        clinics: []\n    }\n\n    componentDidMount(){\n        this.fetchClinics()\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    fetchClinics = () => {\n        _getClinicsOwn(this.fetchClinicsSuccess)\n    }\n\n    fetchClinicsSuccess = data => {\n        this.setState({ clinics: data })\n    }\n\n    submitForm = () => {\n\n        let form = this.state.form\n        form['user_id'] = this.props.userID\n\n        _createClinicUser(this.state.form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        })\n    }\n\n    handleChange = (field, e) => {\n\n        let form = this.state.form\n        form[field] = e.target.value\n\n        this.setState({\n            form\n        })\n    }\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20, width: 300 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    User Clinic Assignment\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <TextField\n                                        select\n                                        label=\"Select Clinic\"\n                                        className={classes.textField}\n                                        value={this.state.form.clinic_id}\n                                        onChange={val => this.handleChange('clinic_id', val)}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n\n                                        {\n                                            _.map(this.state.clinics, clinic => {\n                                                return <MenuItem value={clinic.id}>{clinic.clinic_name}</MenuItem>\n                                            })\n                                        }\n                                        \n                                    </TextField>\n\n                                    <Grid container>\n                                        <Grid item md={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Submit Form\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'Confirm Clinic Assignment'}\n                    message={'Are sure you want to assign user to this clinic?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nClinicUserForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst ClinicUserFormWrapped = withStyles(styles)(ClinicUserForm)\n\nexport default ClinicUserFormWrapped","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport InputAdornment from '@material-ui/core/InputAdornment'\n\nimport { CConfirm } from 'components'\nimport { _createPatientHistory } from '../../rest/patient_history.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\nimport _ from 'lodash'\n\n\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass PatientHistoryForm extends React.Component {\n   state =  {\n      form: {},\n      confirm: false,\n   }\n\n   showPopup = val => {\n      this.setState({ confirm: val })\n   }\n\n   submitForm = () => {\n      let form = this.state.form;\n\n      form['patient'] = this.props.dataID;\n\n      if(_.isEmpty(this.state.form.visit_datetime)){\n         form['visit_datetime'] = moment().format(\"MM/DD/YYYY\")\n      }\n\n      _createPatientHistory(form, () => {\n         this.showPopup(false)\n         this.props.closeForm()\n         this.props.refreshList()\n      })\n   }\n   handleDateChange = (field, e) => {\n      let form = this.state.form\n      form[field] = moment(e).format(\"MM/DD/YYYY\")\n      \n      this.setState({\n         form\n      })\n   }\n\n   handleChange = (field, e) => {\n      let form = this.state.form\n      form[field] = e.target.value\n      \n      this.setState({\n         form\n      })\n   }\n\n   render() {\n\n      return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    New Patient History Record\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <Grid container>\n                                        <Grid item md={4} xs={12} style={{ paddingRight: 5 }}>\n                                            <DatePicker\n                                                keyboard\n                                                label=\"Date of Visit\"\n                                                format={\"MM/DD/YYYY\"}\n                                                placeholder={moment().format(\"MM/DD/YYYY\")}\n                                                mask={value =>\n                                                    // handle clearing outside if value can be changed outside of the component\n                                                    value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                                }\n                                                value={this.state.form.visit_datetime}\n                                                onChange={value => this.handleDateChange('visit_datetime', value)}\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n\n                                            <TextField\n                                                id=\"chief_complaint\"\n                                                label=\"Chief Complaint\"\n                                                placeholder=\"Enter Chief Complaint\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                                onChange={value => this.handleChange('chief_complaint', value)}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n\n                                            <TextField\n                                                id=\"history_present_illness\"\n                                                label=\"History of Illness\"\n                                                placeholder=\"Enter of Illness\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('history_present_illness', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n\n                                            <TextField\n                                                id=\"physical_exam\"\n                                                label=\"Physical Exam\"\n                                                placeholder=\"Enter Physical Exam\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('physical_exam', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n\n                                            <TextField\n                                                id=\"diagnosis\"\n                                                label=\"Diagnosis\"\n                                                placeholder=\"Enter Diagnosis\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('diagnosis', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12} style={{ paddingLeft: 5, paddingRight: 5 }}>\n                                            <TextField\n                                                id=\"init_weight\"\n                                                label=\"Weight\"\n                                                placeholder=\"Enter Weight\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('init_weight', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                InputProps={{\n                                                        endAdornment: <InputAdornment position=\"end\">kg</InputAdornment>,\n                                                    }}\n                                            />\n\n                                            <TextField\n                                                id=\"init_height\"\n                                                label=\"Height\"\n                                                placeholder=\"Enter Height\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('init_height', value)}\n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                InputProps={{\n                                                        endAdornment: <InputAdornment position=\"end\">cm</InputAdornment>,\n                                                }}\n                                            />\n\n                                            <TextField\n                                                id=\"init_temp\"\n                                                label=\"Temperature\"\n                                                placeholder=\"Enter Temperature\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('init_temp', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                InputProps={{\n                                                    endAdornment: <InputAdornment position=\"end\">C</InputAdornment>,\n                                                }}\n                                            />\n\n                                            <TextField\n                                                id=\"init_pulse_rate\"\n                                                label=\"Pulse Rate\"\n                                                placeholder=\"Enter Pulse Rate\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('init_pulse_rate', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                InputProps={{\n                                                    endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\n                                                }}\n                                            />\n\n                                            <TextField\n                                                id=\"init_resp_rate\"\n                                                label=\"Respiratory Rate\"\n                                                placeholder=\"Enter Respiratory Rate\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('init_resp_rate', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                InputProps={{\n                                                    endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12} style={{ paddingLeft: 5 }}>\n                                            <TextField\n                                                id=\"init_food_allergy\"\n                                                label=\"Food Allergy\"\n                                                placeholder=\"Enter Food Allergy\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('init_food_allergy', value)}\n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                            />\n\n                                            <TextField\n                                                id=\"init_drug_allergy\"\n                                                label=\"Drug Allergy\"\n                                                placeholder=\"Enter Drug Allergy\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('init_drug_allergy', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n                                    <Grid container>\n                                        <Grid item md={6} xs={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Save History Record\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'Saving Confirmation'}\n                    message={'Are sure you want to save this patient history data?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nPatientHistoryForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst PatientHistoryFormWrapped = withStyles(styles)(PatientHistoryForm)\n\nexport default PatientHistoryFormWrapped","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport InputAdornment from '@material-ui/core/InputAdornment'\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { CConfirm } from 'components'\nimport { _createPatientVaccination } from '../../rest/patient_vaccination.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\nimport _ from 'lodash'\n\n\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass PatientVaccinationForm extends React.Component {\n   state =  {\n      form: {},\n      confirm: false,\n      vaccList: []\n   }\n\n   showPopup = val => {\n      this.setState({ confirm: val })\n   }\n\n   submitForm = () => {\n      let form = this.state.form;\n\n      form['patient'] = this.props.dataID;\n\n      if(_.isEmpty(this.state.form.visit_datetime)){\n         form['visit_datetime'] = moment().format(\"MM/DD/YYYY\")\n      }\n\n      if(_.isEmpty(this.state.form.vaccination_date)){\n            form['vaccination_date'] = moment().format(\"MM/DD/YYYY\")\n        }\n\n        if(_.isEmpty(this.state.form.next_vaccination_schedule)){\n            form['next_vaccination_schedule'] = moment().format(\"MM/DD/YYYY\")\n        }\n\n      form['vaccination_details'] = JSON.stringify(this.state.vaccList)\n\n      _createPatientVaccination(form, () => {\n         this.showPopup(false)\n         this.props.closeForm()\n         this.props.refreshList()\n      })\n   }\n\n   handleDateChange = (field, e) => {\n      let form = this.state.form\n      form[field] = moment(e).format(\"MM/DD/YYYY\")\n      \n      this.setState({\n         form\n      })\n   }\n\n   handleChange = (field, e) => {\n      let form = this.state.form\n      form[field] = e.target.value\n      \n      this.setState({\n         form\n      })\n   }\n\n   handleVaccChange = (field, e) => {        \n        this.setState({\n            [field]: e.target.value\n        })\n   }\n\n   addToVaccList = () => {\n        let vaccList = this.state.vaccList\n\n        vaccList.push({ \n            id: rand(), \n            vaccine: this.state.vaccine, \n            route: this.state.route \n        })\n\n        this.setState({\n            vaccList\n        })\n   }\n\n   removeVacc = (id) => {      \n        let vaccList = this.state.vaccList\n\n        _.remove(vaccList, data => {\n            return data.id == id\n        })\n\n        this.setState({\n            vaccList\n        })\n   }\n\n   render() {\n\n      return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    New Vaccination Record\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n\n                                    <Grid container>\n                                        <Grid item md={6} xs={12} style={{ paddingRight: 5 }}>\n                                            <DatePicker\n                                                keyboard\n                                                label=\"Date of Visit\"\n                                                format={\"MM/DD/YYYY\"}\n                                                placeholder={moment().format(\"MM/DD/YYYY\")}\n                                                mask={value =>\n                                                    // handle clearing outside if value can be changed outside of the component\n                                                    value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                                }\n                                                value={this.state.form.visit_datetime}\n                                                onChange={value => this.handleDateChange('visit_datetime', value)}\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n\n                                            <DatePicker\n                                                keyboard\n                                                label=\"Vaccination Date\"\n                                                format={\"MM/DD/YYYY\"}\n                                                placeholder={moment().format(\"MM/DD/YYYY\")}\n                                                mask={value =>\n                                                    // handle clearing outside if value can be changed outside of the component\n                                                    value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                                }\n                                                value={this.state.form.vaccination_date}\n                                                onChange={value => this.handleDateChange('vaccination_date', value)}\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n\n                                            <TextField\n                                                id=\"vaccination_notes\"\n                                                label=\"Vaccination Notes\"\n                                                placeholder=\"Enter Vaccination Notes\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('vaccination_notes', value)}\n                                                \n                                                InputLabelProps={{\n                                                        shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n\n                                            <DatePicker\n                                                keyboard\n                                                label=\"Next Vaccination Schedule\"\n                                                format={\"MM/DD/YYYY\"}\n                                                placeholder={moment().format(\"MM/DD/YYYY\")}\n                                                mask={value =>\n                                                    // handle clearing outside if value can be changed outside of the component\n                                                    value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                                }\n                                                value={this.state.form.next_vaccination_schedule}\n                                                onChange={value => this.handleDateChange('next_vaccination_schedule', value)}\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={6} xs={12} style={{ paddingLeft: 5, paddingRight: 5 }}>\n                                            <Grid container>\n                                                <Grid item md={5}>\n                                                    <TextField\n                                                        id=\"vaccine\"\n                                                        label=\"Vaccine\"\n                                                        placeholder=\"Enter Vaccine\"\n                                                        fullWidth\n                                                        margin=\"dense\"\n                                                        variant=\"outlined\"\n                                                        onChange={value => this.handleVaccChange('vaccine', value)}\n                                                        \n                                                        InputLabelProps={{\n                                                                shrink: true,\n                                                        }}\n                                                        inputProps={{ autoCapitalize: true }}\n                                                    />\n                                                </Grid>\n                                                <Grid item md={5}>\n                                                    <TextField\n                                                        id=\"route\"\n                                                        label=\"Route\"\n                                                        placeholder=\"Enter Route\"\n                                                        fullWidth\n                                                        margin=\"dense\"\n                                                        variant=\"outlined\"\n                                                        onChange={value => this.handleVaccChange('route', value)}\n                                                        \n                                                        InputLabelProps={{\n                                                                shrink: true,\n                                                        }}\n                                                        inputProps={{ autoCapitalize: true }}\n                                                    />\n                                                </Grid>\n                                                <Grid item md={2}>\n                                                    <Button color=\"primary\" onClick={this.addToVaccList}>Add</Button>\n                                                </Grid>\n                                            </Grid>\n\n                                            <Table>\n                                                <TableBody>\n                                                    <TableRow>\n                                                        <TableCell>\n                                                            <strong>Vaccine</strong>\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <strong>Route</strong>\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <strong>Action</strong>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                    {\n                                                        _.map(this.state.vaccList, data => {\n                                                            return <TableRow>\n                                                                <TableCell>\n                                                                    {data.vaccine}\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    {data.route}\n                                                                </TableCell>\n                                                                <TableCell>\n                                                                    <Button color=\"secondary\" onClick={() => this.removeVacc(data.id)}>REMOVE</Button>\n                                                                </TableCell>\n                                                            </TableRow>\n                                                        })\n                                                    }\n                                                    \n                                                </TableBody>\n                                            </Table>\n\n\n                                        </Grid>\n                                    </Grid>\n\n\n                                    <Grid container>\n                                        <Grid item md={6} xs={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Save Vaccination Record\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'Saving Confirmation'}\n                    message={'Are sure you want to save this vaccination data?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nPatientVaccinationForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst PatientVaccinationFormWrapped = withStyles(styles)(PatientVaccinationForm)\n\nexport default PatientVaccinationFormWrapped","import React from 'react';\nimport { Grid, Button } from '@material-ui/core';\n\nclass ActionBar extends React.Component {\n    render() {\n        return (\n            <Grid container style={this.props.style}>\n                <Grid item>\n                    {this.props.children}\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default ActionBar","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField, LinearProgress, CircularProgress\n} from '@material-ui/core'\nimport { CMainLayout } from 'components'\nimport { RouteTo } from '../components/Utils/RouterAction'\nimport { _tryLogin } from '../rest/users.api'\nimport * as rule from '../components/Utils/RoleAccessConfig'\n\nimport _ from 'lodash'\n\nconst styles = {\n    root: {\n      flexGrow: 1,\n    },\n    grow: {\n      flexGrow: 1,\n    }\n}\n\nclass MainContainer extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        showRegistration: false,\n        email: '',\n        password: '',\n        message: '',\n        inProgress: false\n    }\n\n    componentDidMount(){\n        this.validateAuth()\n    }\n\n    validateAuth = () => {\n        if(!_.isEmpty(localStorage.getItem(\"access_token\"))){\n            if(rule.roleQualified(rule.VIEW_DASHBOARD))\n                this.goTo('/dashboard')\n            else\n                this.goTo('/clinics')\n        }\n    }\n\n    showRegistration = val => {\n        this.setState({ showRegistration: val })\n    }\n\n    goTo = (path) => {\n        RouteTo(this.props, path)\n    }\n\n    tryLogin = () => {\n        this.setState({ inProgress: true }, () => {\n            _tryLogin({\n                email: this.state.email,\n                password: this.state.password\n            }, data => {\n                \n                if(data.status == 200 && !_.isEmpty(data.access_token)){\n                    if(rule.roleQualified(rule.VIEW_DASHBOARD))\n                        this.goTo('/dashboard')\n                    else\n                        this.goTo('/clinics')\n                }\n                else if(data.status == 401) {\n                    this.setState({ message: 'Invalid email or password', inProgress: false })\n                }\n            })\n        })\n    }\n\n    handleChange = (field, e) => {\n        this.setState({\n            [field]: e.target.value\n        })\n    }\n\n    render(){\n        const { classes } = this.props\n        return (\n            <CMainLayout className={classes.root}>\n\n                \n                <Grid container style={{ marginTop: 50 }} spacing={8} justify=\"center\" alignContent=\"center\">\n                    <Grid item>\n                        {\n                            !_.isEmpty(this.state.message) ? <Typography variant=\"button\" gutterBottom style={{ color: 'red' }}>\n                                {this.state.message}\n                            </Typography> : null\n                        }\n                        <form noValidate autoComplete=\"off\">\n\n                            <TextField\n                                id=\"username\"\n                                label=\"Username/Email\"\n                                placeholder=\"Enter Username/Email\"\n                                fullWidth\n                                margin=\"dense\"\n                                required\n                                onChange={val => this.handleChange('email', val)}\n                                variant=\"outlined\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n      \n                            <TextField\n                                id=\"password\"\n                                label=\"Password\"\n                                placeholder=\"Enter Password\"\n                                fullWidth\n                                onChange={val => this.handleChange('password', val)}\n                                type=\"password\"\n                                margin=\"dense\"\n                                required\n                                variant=\"outlined\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                onKeyPress={ev => {\n\n                                    if (ev.key === 'Enter') {\n                                        this.tryLogin()\n                                        ev.preventDefault();\n                                    }\n                                }}\n                            />\n                            \n                            <Button disabled={this.state.inProgress} variant=\"contained\" fullWidth color=\"primary\" onClick={() => this.tryLogin()} style={{ marginTop: 10 }}>\n                                {\n                                    this.state.inProgress ? 'Authenticating' : 'Login'\n                                }\n                            </Button>\n\n                            <Button fullWidth color=\"primary\" onClick={() => this.goTo('/dashboard')} style={{ marginTop: 10 }}>\n                                Forgot password\n                            </Button>\n                        </form>\n                    </Grid>\n                </Grid>\n        \n            </CMainLayout>\n        )\n    }\n}\n\nMainContainer.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(MainContainer)","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport { CDrawerLayout, ManageClinics, ManageUsers, Settings, Dashboard } from 'components'\n\nimport { tryLogout } from '../rest/users.api'\nimport { ActOnBranch } from '../components/Utils/RouterAction';\n\nconst styles = {\n    root: {\n      flexGrow: 1\n    },\n    grow: {\n      flexGrow: 1\n    }\n}\n\nclass HomePage extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        showClinicForm: false\n    }\n\n    showClinicForm = val => {\n        this.setState({ showClinicForm: val })\n    }\n\n    render(){\n        const { classes } = this.props\n        \n        // let drawers = [\n        //     { name: 'Dashboard', route: '/dashboard', icon: <InboxIcon /> },\n        //     { name: 'Manage Clinics', route: '/dashboard/manage_clinics', icon: <InboxIcon /> },\n        //     { name: 'Manage Users', route: '/dashboard/manage_users', icon: <MailIcon /> },\n        //     { name: 'Settings', route: '/dashboard/settings', icon: <InboxIcon /> }\n        // ]\n\n        let drawers = [\n            { name: 'Dashboard', route: '/dashboard', icon: <InboxIcon /> },\n            { name: 'Manage Clinics', route: '/dashboard/manage_clinics', icon: <InboxIcon /> },\n            { name: 'Manage Users', route: '/dashboard/manage_users', icon: <MailIcon /> },\n        ]\n\n        return (\n            <CDrawerLayout drawers={drawers} {...this.props}>\n                <Route exact path=\"/dashboard\" render={() => <Dashboard />} />\n                <Route exact path=\"/dashboard/manage_clinics\" render={() => <ManageClinics {...this.props} />} />\n                <Route exact path=\"/dashboard/manage_users\" render={() => <ManageUsers {...this.props} />} />\n                <Route exact path=\"/dashboard/settings\" render={() => <Settings />} />\n            </CDrawerLayout>\n        )\n    }\n}\n\nHomePage.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(HomePage)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\n\nimport { CDrawerLayout, ManageClinics } from 'components'\nimport _ from 'lodash'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass ClinicListPage extends React.Component {\n   state = {\n      data: {},\n      clinicID: 0\n   }\n\n   componentDidMount(){\n      this.setState({ clinicID: this.props.match.params.clinicID })\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = {\n         clinic: {\n            id: 1,\n            clinic_name: 'Ace Dermatology'\n         },\n         patients: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ],\n         appointments: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ]\n      }\n\n      this.setState({ data })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <CDrawerLayout unPad firstPage {...this.props}>\n            <Route exact path={`/clinics`} render={() => <ManageClinics {...this.props} />} />\n         </CDrawerLayout>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(ClinicListPage)","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\n\nimport { CDrawerLayout, PatientDashboard } from 'components'\n\nconst styles = {\n    root: {\n      flexGrow: 1\n    },\n    grow: {\n      flexGrow: 1\n    }\n}\n\nclass PatientContainer extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        patientID: 0\n    }\n\n    componentDidMount(){\n        this.setState({ patientID: this.props.match.params.patientID })\n    }\n\n    render(){\n        const { classes } = this.props\n        \n        let drawers = [\n            { name: 'Information', route: `/patient/${this.state.patientID}`, icon: <InboxIcon /> },\n            { name: 'History', route: `/patient/${this.state.patientID}/history`, icon: <InboxIcon /> },\n        ]\n\n        return (\n            <CDrawerLayout unPad backType {...this.props}>\n                <Route exact path={`/patient/${this.state.patientID}`} render={() => <PatientDashboard {...this.props} />} />\n            </CDrawerLayout>\n        )\n    }\n}\n\nPatientContainer.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(PatientContainer)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\n\nimport { CDrawerLayout, Patients, Appointments, ClinicDashboard  } from 'components'\nimport _ from 'lodash'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass ClinicContainer extends React.Component {\n   state = {\n      data: {},\n      clinicID: 0\n   }\n\n   componentDidMount(){\n      this.setState({ clinicID: this.props.match.params.clinicID })\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = {\n         clinic: {\n            id: 1,\n            clinic_name: 'Ace Dermatology'\n         },\n         patients: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ],\n         appointments: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ]\n      }\n\n      this.setState({ data })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <CDrawerLayout unPad backType {...this.props}>\n            <Route exact path={`/clinic/${this.state.clinicID}`} render={() => <ClinicDashboard {...this.props} />} />\n         </CDrawerLayout>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(ClinicContainer)","import React from 'react'\nimport { MainContainer, AccessDenied, HomePage } from 'containers'\nimport { RouteTo, CheckAuthentication } from 'components/Utils/RouterAction'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport { DecideWhere } from '../components/Utils/RouterAction'\nimport PatientContainer from '../containers/PatientContainer';\nimport ClinicContainer from '../containers/ClinicContainer';\nimport { ClinicListPage } from '../containers';\n\nfunction Routes() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={MainContainer} />\n        <Route path=\"/dashboard\" render={props => CheckAuthentication(<HomePage {...props} />, ['ADMIN','MAIN_OWNER'])} />\n        <Route path=\"/clinics\" render={props => CheckAuthentication(<ClinicListPage {...props} />, ['ADMIN','MAIN_OWNER','STAFF','DOCTOR'])} />\n        <Route path=\"/clinic/:clinicID\" render={props => <ClinicContainer {...props} />} />\n        <Route path=\"/patient/:patientID\" render={props => <PatientContainer {...props} />} />\n        <Route component={AccessDenied} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default Routes\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/* eslint-disable no-console */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registrationParam => {\n      const registration = registrationParam\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from 'store'\nimport Routes from 'routes'\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport registerServiceWorker from 'utils/registerServiceWorker'\nimport MomentUtils from '@date-io/moment'\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#2196f3'\n    }\n  }\n})\n\nrender(\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <MuiThemeProvider theme={theme}>\n        <Provider store={configureStore()}>\n          <Routes />\n        </Provider>\n      </MuiThemeProvider>\n    </MuiPickersUtilsProvider>,\n  document.getElementById('root')\n)\n\nregisterServiceWorker()\n","import { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport rootReducer from 'reducers'\n\nconst middlewares = [ReduxThunk]\nconst enhancer = [applyMiddleware(...middlewares)]\n\nexport default function configureStore(initialState = {}) {\n  return createStore(rootReducer, initialState, ...enhancer)\n}\n"],"sourceRoot":""}