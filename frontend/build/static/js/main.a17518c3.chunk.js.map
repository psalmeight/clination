{"version":3,"sources":["store/index.js","rest/index.js","rest/users.api.js","components/Utils/RouterAction.js","containers/AccessDenied.js","components/Layout/CAppBar.js","components/Layout/CMainLayout.js","components/Layout/CDrawerLayout.js","components/Layout/CConfirm.js","components/Pages/Dashboard.js","components/Utils/RoleAccessConfig.js","rest/clinic.api.js","components/Pages/ManageClinics.js","rest/clinic_user.api.js","components/Pages/ManageUsers.js","components/Pages/Settings.js","components/Clinic/ClinicDashboard.js","rest/patient.api.js","components/Clinic/Patients.js","components/Clinic/Appointments.js","components/Patient/PatientDashboard.js","components/Patient/PatientInformation.js","rest/patient_history.api.js","components/Patient/PatientHistory.js","components/Patient/PatientPastHistory.js","rest/patient_vaccination.api.js","components/Patient/PatientVaccination.js","components/Patient/PatientMedications.js","components/Units/ClinicCard.js","components/Units/ClinicForm.js","components/Units/UserForm.js","components/Units/PatientForm.js","components/Units/ClinicUserForm.js","components/Units/PatientHistoryForm.js","components/Units/PatientVaccinationForm.js","components/Utils/ActionBar.js","containers/MainContainer.js","containers/HomePage.js","containers/ClinicListPage.js","containers/PatientContainer.js","containers/ClinicContainer.js","routes/index.js","utils/registerServiceWorker.js","index.js","reducers/index.js","store/store.prod.js"],"names":["module","exports","require","instance","axios","create","baseURL","get","path","params","config","defaults","headers","common","localStorage","getItem","post","body","patch","destroy","delete","_getUsers","callback","arguments","length","undefined","then","response","data","catch","e","console","log","_getOwnerDashboardData","_getDoctorsByClinic","clinicID","concat","_createUser","_tryLogin","payload","status","_","isEmpty","access_token","setItem","user","role","id","_tryLogout","_deleteUser","userId","RouteTo","props","history","push","CheckAuthentication","Component","AllowedRoles","uxRx","indexOf","react_default","a","createElement","react_router","to","ActOnBranch","method","name","value","clear","AccessDenied","tryLogout","_this","_this2","this","href","onClick","React","withStyles","theme","root","flexGrow","grow","menuButton","Object","defineProperty","marginRight","breakpoints","up","display","appBar","marginLeft","width","appBarBackType","menuButtonBackType","classes","classAppBar","backType","className","style","marginBottom","AppBar_default","positionStatic","Toolbar_default","IconButton_default","color","aria-label","goBack","ArrowBack_default","Typography_default","variant","noWrap","setTitle","drawers","handleDrawerToggle","Menu_default","showRegistration","Button_default","logout","position","right","CMainLayout","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","form","confirm","message","val","setState","showConfirm","submitForm","handleDateChange","field","moment","format","handleChange","target","index_es","children","open","container","direction","justify","alignItems","item","elevation","padding","noValidate","autoComplete","spacing","md","xs","label","placeholder","fullWidth","margin","onChange","required","InputLabelProps","shrink","inputProps","autoCapitalize","material_ui_pickers_esm","keyboard","mask","dob","type","gutterBottom","marginTop","textAlign","Layout_CConfirm","key","onClose","onOk","title","actions","actionTitle","action","actionType","CDrawerLayout","mobileOpen","pageTitle","validateShouldTitle","goTo","location","pathname","_this$props","contentClass","content","unPad","contentNoPads","drawer","toolbar","List_default","map","ListItem_default","button","route","ListItemIcon_default","icon","ListItemText_default","primary","CssBaseline_default","firstPage","Layout_CAppBar","routePath","assign","Hidden_default","smUp","implementation","Drawer_default","anchor","paper","drawerPaper","xsDown","flexShrink","mixins","unit","withTheme","CConfirm","Modal_default","top","left","transform","size","CConfirmWrapped","backgroundColor","palette","background","boxShadow","shadows","outline","Dashboard","dashboardData","clinic_count","staff_count","patient_count","fetchData","Grid_default","Paper_default","component","objectSpread","gutters","paddingTop","paddingBottom","REGISTER_CLINIC","VIEW_DASHBOARD","roleQualified","roles","currentRole","includes","_getClinicsOwn","_createClinic","_deleteClinic","clinicId","ManageClinics","openClinicForm","deleteClinic","onCardClick","addNewClinic","rule","Utils_ActionBar","flexDirection","fontSize","clinic","lg","Units_ClinicCard","onDelete","Units_ClinicForm","closeForm","refreshList","_createClinicUser","_deleteClinicUser","clinic_userId","ManageUsers","expanded","showUserRole","deleteRoleOpen","deleteUserOpen","selectedUserID","selectedRoleID","panel","event","handleDelete","alert","userID","onDeleteRole","roleID","onDeleteUser","deleteRoleSuccess","deleteUserSuccess","record","idx","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","heading","lastname","firstname","middlename","ExpansionPanelDetails_default","Table_default","TableBody_default","TableRow_default","TableCell_default","email","contact_no","clinic_name","ExpansionPanelActions_default","justifyContent","Units_UserForm","Units_ClinicUserForm","deleteCardOpen","chip","textTransform","Settings","TabContainer","ClinicDashboard","Tabs_default","Tab_default","Clinic_Patients","Clinic_Appointments","_getPatient","patientID","_getPatientsByClinic","search","_createPatient","_updatePatient","_updatePatientPast","Patients","openPatientForm","searchPatient","match","patientSelect","searchRoot","paddingLeft","InputBase_default","input","table","TableHead_default","fontWeight","gender","purpleAvatar","orangeAvatar","cursor","hover","fullname","last_visit_date","Units_PatientForm","flex","iconButton","avatar","deepOrange","deepPurple","Appointments","employee_name","contact","clinics","Search_default","PatientDashboard","patient","fetchPatient","fetchPatientSuccess","patient_name","diff","details","avatarClass","genderChar","react","Avatar_default","secondary","PatientDashboard_TabContainer","Patient_PatientHistory","Patient_PatientVaccination","Patient_PatientPastHistory","Patient_PatientInformation","PatientInformation","showPopup","fetchFromProps","address","select","SelectProps","MenuProps","menu","MenuItem_default","father_name","father_occupation","mother_name","mother_occupation","_getPatientHistoriesByPatient","_createPatientHistory","_deletePatientHistory","patient_historyId","PatientHistory","openDataForm","selectedDataID","selectedData","mode","onEditData","onDeleteData","dataID","confirmDelete","deleteDataSuccess","bgColor","visit_datetime","chief_complaint","paddingRight","whiteSpace","history_present_illness","physical_exam","diagnosis","init_weight","init_height","init_head_circumference","init_temp","init_pulse_rate","init_resp_rate","medications","diagnostics","Units_PatientHistoryForm","PatientPastHistory","multiline","personal_history","family_history","allergies","_getPatientVaccinationsByPatient","_createPatientVaccination","_deletePatientVaccination","patient_vaccinationId","PatientVaccination","vaccinationRecord","vaccination_details","JSON","parse","vaccineString","forEach","vRec","i","vaccine","vaccination_date","vaccination_notes","next_vaccination_schedule","Units_PatientVaccinationForm","PatientMedications","date","hpi","Card_default","card","CardContent_default","minWidth","ClinicCard","deleteOpen","CardActionArea_default","clinic_address","clinic_contact","CardActions_default","media","objectFit","ClinicForm","handleClose","TextField_default","ClinicFormWrapped","UserForm","UserFormWrapped","PatientForm","doctors","fetchDoctors","doctor","PatientFormWrapped","ClinicUserForm","fetchClinics","fetchClinicsSuccess","textField","clinic_id","ClinicUserFormWrapped","PatientHistoryForm","modalValidate","clone","onWYSChange","text","editorState","onRendered","InputProps","endAdornment","InputAdornment_default","PatientHistoryFormWrapped","PatientVaccinationForm","vaccList","stringify","handleVaccChange","addToVaccList","Math","round","random","removeVacc","remove","PatientVaccinationFormWrapped","ActionBar","MainContainer","password","inProgress","validateAuth","tryLogin","Layout_CMainLayout","alignContent","onKeyPress","ev","preventDefault","disabled","HomePage","showClinicForm","MoveToInbox_default","Mail_default","Layout_CDrawerLayout","exact","render","Pages_Dashboard","Pages_ManageClinics","Pages_ManageUsers","Pages_Settings","ClinicListPage","patients","appointments","PatientContainer","Patient_PatientDashboard","ClinicContainer","Clinic_ClinicDashboard","Routes","react_router_dom","containers_HomePage","containers_ClinicListPage","containers_ClinicContainer","containers_PatientContainer","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registrationParam","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","createMuiTheme","main","utils","MomentUtils","core_styles","es","store","configureStore","routes","document","getElementById","URL","process","origin","addEventListener","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","rootReducer","combineReducers","__webpack_require__","d","__webpack_exports__","middlewares","ReduxThunk","enhancer","applyMiddleware","apply","initialState","createStore"],"mappings":"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","file":"static/js/main.a17518c3.chunk.js","sourcesContent":["/* eslint-disable global-require */\nmodule.exports = process.env.NODE_ENV === 'production' ? require('./store.prod') : require('./store.dev')\n","import axios from 'axios'\n\nconst auth0BaseUrl = 'https://srv.hisd3.com'\n//const auth0BaseUrl = 'http://localhost:8000'\n\nlet instance = axios.create({\n  baseURL: auth0BaseUrl,\n})\n\nexport const get = (path, params, config) => {\n  instance.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n  return instance.get(path, params, config)\n}\n\nexport const post = (path, body, config) => {\n  instance.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n  return instance.post(path, body || {}, config)\n}\n\nexport const patch = (path, body, config) => {\n  instance.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n  return instance.patch(path, body || {}, config)\n}\n\nexport const destroy = (path, config) => {\n  instance.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n  return instance.delete(path, config)\n}\n","import { get, post, destroy } from '../rest'\nimport _ from 'lodash'\n\nexport let _getUsers = (callback = null) => {\n  get('/api/v1/users')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getUsers', e)\n    })\n}\n\nexport let _getOwnerDashboardData = (callback = null) => {\n  get('/api/v1/user/dashboard_data')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getUsers', e)\n    })\n}\n\nexport let _getDoctorsByClinic = (clinicID, callback = null) => {\n  get(`/api/v1/users/clinic_doctors/${clinicID}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getDoctorsByClinic', e)\n    })\n}\n\nexport let _createUser = (data, callback = null, mainUser = true) => {\n  if(mainUser){\n    post('/api/user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveUser', e)\n    })\n  }\n  else {\n    post('/api/v1/user/staff', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveUser', e)\n    })\n  }\n\n}\n\nexport let _tryLogin = (payload, callback = null) => {\n  post('/api/trylogin', payload)\n    .then(response => {\n      \n      if(response.data.status == 200 && !_.isEmpty(response.data.access_token)){\n        localStorage.setItem('access_token', response.data.access_token)\n        localStorage.setItem('rx', response.data.user.role)\n        localStorage.setItem('user_id', response.data.user.id)\n      }\n\n      if (callback) callback(response.data)\n\n    })\n    .catch(e => {\n      console.log('Error in _getUsers', e)\n    })\n}\n\nexport let _tryLogout = (payload, callback = null) => {\n  post('/api/trylogout', payload)\n    .then(response => {\n      if (callback) callback()\n    })\n    .catch(e => {\n      console.log('Error in _getUsers', e)\n    })\n}\n\nexport let _saveUser = (data, callback = null) => {\n  post('/api/v1/user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveUser', e)\n    })\n}\n\nexport let _deleteUser = (userId, callback = null) => {\n  destroy(`/api/v1/user/${userId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deleteUser', e)\n    })\n}\n","import React from 'react'\nimport { Redirect, withRouter } from 'react-router'\nimport _ from 'lodash'\nimport { AccessDenied } from 'containers'\n\nlet checkAuth = !_.isEmpty(localStorage.getItem('access_token')) ? true : false\n\nconst RouteTo = (props, path) => {\n  props.history.push(path)\n}\n\nconst CheckAuthentication = (Component, AllowedRoles) => {\n\n  if (!_.isEmpty(localStorage.getItem('rx'))) {\n    \n    let uxRx = localStorage.getItem('rx')\n\n    if (_.indexOf(AllowedRoles, uxRx) == -1) {\n      return <Redirect to=\"/denied\" />\n    }\n  }\n\n  return !_.isEmpty(localStorage.getItem('access_token')) ? Component : <Redirect to=\"/\" />\n}\n\nconst ActOnBranch = (method, name = null, value = null) => {\n  if (method === 'get') {\n    localStorage.getItem(name, value)\n  } else if (method === 'set') {\n    localStorage.setItem(name, value)\n  } else if (method === 'clear') {\n    localStorage.clear()\n  }\n}\n\nexport { RouteTo, CheckAuthentication, ActOnBranch }\n","import React from 'react'\nimport { _tryLogout } from '../rest/users.api'\nimport { RouteTo, ActOnBranch } from '../components/Utils/RouterAction'\n\nexport default class AccessDenied extends React.Component {\n  tryLogout = () => {\n    _tryLogout({}, data => {\n       ActOnBranch('clear')\n       RouteTo(this.props, '/')\n    })\n }\n\n  render() {\n    return (\n      <div>\n        <h3>Unable to Access This Page</h3>\n        <a href=\"#\" onClick={() => this.tryLogout()}>Go back to Login page</a>\n      </div>\n    )\n  }\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { ClinicForm } from 'components'\n\nimport _ from 'lodash'\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   menuButton: {\n      marginRight: 20,\n      [theme.breakpoints.up(\"sm\")]: {\n         display: \"none\"\n      },\n   },\n   appBar: {\n      marginLeft: drawerWidth,\n      [theme.breakpoints.up(\"sm\")]: {\n         width: `calc(100% - ${drawerWidth}px)`\n      },\n   },\n   appBarBackType: {\n      marginLeft: 0,\n   },\n   menuButtonBackType: {\n      marginRight: 0,\n   },\n})\n\nfunction CAppBar(props) {\n   const { classes } = props\n    \n   let classAppBar = props.backType ? classes.appBarBackType : classes.appBar\n\n   return (\n      <div className={props.className} style={{ marginBottom: 80 }}>\n         <AppBar positionStatic className={classAppBar}>\n            <Toolbar>\n\n               {\n                  props.backType ? (\n                     [<IconButton\n                        color=\"inherit\"\n                        aria-label=\"Open drawer\"\n                        onClick={() => props.goBack()}\n                        className={classes.menuButtonBackType}>\n                           <ArrowBackIcon />\n                     </IconButton>,\n                     <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        {props.setTitle || 'Dashboard'}\n                     </Typography>]\n                  ) : null\n               }\n\n               {\n                  props.drawers ? (\n                     [<IconButton\n                        color=\"inherit\"\n                        aria-label=\"Open drawer\"\n                        onClick={() => props.handleDrawerToggle()}\n                        className={classes.menuButton}>\n                            <MenuIcon />\n                      </IconButton>,\n                      <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        {props.setTitle || 'Dashboard'}\n                      </Typography>]\n                     ) : null\n               }\n\n               {\n                  !props.backType && !props.drawers ? (\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                     {props.setTitle || 'Dashboard'}\n                  </Typography>\n                  ) : null\n               }\n               \n               {\n                  props.showRegistration ?\n                     <Button color=\"inherit\" onClick={props.showRegistration}>Register</Button>\n                  : <Button color=\"inherit\" onClick={() => props.logout()} style={{ position: 'absolute', right: 20 }}>Logout</Button>\n               }\n        </Toolbar>\n      </AppBar>\n      \n    </div>\n  );\n}\n\nCAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(CAppBar)","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport _ from 'lodash'\n\nimport { _createUser } from '../../rest/users.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\n\nimport CAppBar from './CAppBar'\nimport { CConfirm } from 'components'\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    }\n}\n\nclass CMainLayout extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        showRegistration: false,\n        form: {},\n        confirm: false,\n        message: ''\n    }\n\n    showRegistration = val => {\n        this.setState({ showRegistration: val })\n    }\n    \n    showConfirm = val => {\n        this.setState({ confirm: val })\n    }\n\n    submitForm = () => {\n        let form = this.state.form\n        form['ox'] = true;\n\n        _createUser(form, data => {\n            if(data.status != 200){\n                this.setState({ message: data.message }, () => this.showConfirm(false))\n            }\n            else {\n                this.showRegistration(false)\n                this.showConfirm(false)\n            }\n        })\n\n    }\n\n    handleDateChange = (field, e) => {\n        let form = this.state.form\n        form[field] = moment(e).format(\"MM/DD/YYYY\")\n        \n        this.setState({\n           form\n        })\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n\n        this.setState({\n            form\n        })\n    }\n\n    render(){\n        const { classes } = this.props\n        return (\n            <div className={classes.root}>\n                \n                <div style={{ marginBottom: 80 }} />\n\n                <AppBar positionStatic>\n                    <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                        CLINation\n                    </Typography>\n                    <Button color=\"inherit\" onClick={this.showRegistration}>REGISTER</Button>\n                    </Toolbar>\n                </AppBar>\n\n                {this.props.children}\n\n                <Modal open={this.state.showRegistration}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    User Registration Form\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <Grid container spacing={16}>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"lastname\"\n                                                label=\"Lastname\"\n                                                placeholder=\"Enter Lastname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('lastname', value)}\n                                                required={true}\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"firstname\"\n                                                label=\"Firstname\"\n                                                placeholder=\"Enter Firstname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                onChange={value => this.handleChange('firstname', value)}\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"middlename\"\n                                                label=\"Middlename\"\n                                                placeholder=\"Enter Middlename\"\n                                                onChange={value => this.handleChange('middlename', value)}\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n                                    <DatePicker\n                                        keyboard\n                                        label=\"Birthdate\"\n                                        format={\"MM/DD/YYYY\"}\n                                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                                        mask={value =>\n                                        // handle clearing outside if value can be changed outside of the component\n                                        value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                        }\n                                        value={this.state.form.dob}\n                                        onChange={value => this.handleDateChange('dob', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                        shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"contact\"\n                                        label=\"Contact Number\"\n                                        placeholder=\"Enter Contact Number\"\n                                        onChange={value => this.handleChange('contact_no', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"email\"\n                                        label=\"Email\"\n                                        placeholder=\"Enter Email\"\n                                        onChange={value => this.handleChange('email', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    {/* <TextField\n                                        id=\"username\"\n                                        label=\"Username\"\n                                        placeholder=\"Enter Username\"\n                                        onChange={value => this.handleChange('username', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    /> */}\n                \n                                    <TextField\n                                        id=\"password\"\n                                        label=\"Password\"\n                                        placeholder=\"Enter Password\"\n                                        onChange={value => this.handleChange('password', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"confirm_password\"\n                                        label=\"Confirm Password\"\n                                        placeholder=\"Enter Confirm\"\n                                        onChange={value => this.handleChange('confirm', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n{\n                                    !_.isEmpty(this.state.message) ? <Typography variant=\"button\" gutterBottom style={{ color: 'red' }}>\n                                            {this.state.message}\n                                        </Typography> : null\n                                    }\n\n                                    <Grid container>\n                                        <Grid item md={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showConfirm(true)} style={{ marginTop: 20 }}>\n                                                Register\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.showRegistration(false)} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    key={1}\n                    open={this.state.confirm}\n                    onClose={() => this.showConfirm(false)}\n                    onOk={() => this.submitForm()}\n                    title={'New User Confirmation'}\n                    message={'Are sure you want to save this user information?'}\n                    actions={[\n                        { actionTitle: 'Yes', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showConfirm(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nCMainLayout.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(CMainLayout)","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\n\nimport { RouteTo, ActOnBranch } from '../Utils/RouterAction'\nimport _ from 'lodash'\nimport CAppBar from \"./CAppBar\";\nimport { _tryLogout } from '../../rest/users.api'\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n   root: {\n      display: \"flex\"\n   },\n   drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n         width: drawerWidth,\n         flexShrink: 0\n      }\n   },\n   appBar: {\n      marginLeft: drawerWidth,\n      [theme.breakpoints.up(\"sm\")]: {\n         width: `calc(100% - ${drawerWidth}px)`\n      }\n   },\n   menuButton: {\n      marginRight: 20,\n      [theme.breakpoints.up(\"sm\")]: {\n         display: \"none\"\n      }\n   },\n   toolbar: theme.mixins.toolbar,\n   drawerPaper: {\n      width: drawerWidth\n   },\n   content: {\n      flexGrow: 1,\n      padding: theme.spacing.unit * 2\n   },\n   contentNoPads: {\n      flexGrow: 1,\n      padding: 0\n   }\n})\n\nclass CDrawerLayout extends React.Component {\n   state = {\n      mobileOpen: false,\n      pageTitle: ''\n   }\n   \n   componentDidMount(){\n      this.validateShouldTitle(this.props.location.pathname)\n   }\n\n   validateShouldTitle = path => {\n      switch(path){\n         case '/dashboard': \n            this.setState({ pageTitle: 'Dashboard' }); break\n         case '/dashboard/manage_clinics': \n            this.setState({ pageTitle: 'Manage Clinics' }); break\n         case '/dashboard/manage_users': \n            this.setState({ pageTitle: 'Manage Users' }); break\n         case '/dashboard/settings': \n            this.setState({ pageTitle: 'Settings' }); break \n      }\n   }\n\n   handleDrawerToggle = () => {\n      this.setState(state => ({ mobileOpen: !state.mobileOpen }));\n   }\n\n   goTo = path => {\n      switch(path){\n         case '/dashboard': \n            this.setState({ pageTitle: 'Dashboard' }); break\n         case '/dashboard/manage_clinics': \n            this.setState({ pageTitle: 'Manage Clinics' }); break\n         case '/dashboard/manage_users': \n            this.setState({ pageTitle: 'Manage Users' }); break\n         case '/dashboard/settings': \n            this.setState({ pageTitle: 'Settings' }); break     \n      }\n\n      RouteTo(this.props, path)\n   }\n\n   tryLogout = () => {\n      _tryLogout({}, data => {\n         ActOnBranch('clear')\n         this.goTo('/')\n      })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n      let contentClass = classes.content\n\n      if(this.props.unPad)\n         contentClass = classes.contentNoPads\n\n      const drawer = (\n         <div>\n            <div className={classes.toolbar} />\n            <List>\n               {\n                  _.map(this.props.drawers, data => {\n                     return (\n                        <ListItem button key={data.name} onClick={() => this.goTo(data.route)}>\n                           <ListItemIcon>\n                              {data.icon}\n                           </ListItemIcon>\n                           \n                           <ListItemText primary={data.name} />\n                        </ListItem>\n                     )\n                  })\n               }\n\n               {/* <ListItem button key={'Logout'} onClick={() => this.tryLogout()}>\n                  <ListItemIcon>\n                     <MailIcon />\n                  </ListItemIcon>\n                  \n                  <ListItemText primary={'Logout'} />\n               </ListItem> */}\n            </List>\n         </div>\n      )\n\n      return (\n         <div className={classes.root}>\n            <CssBaseline />\n            \n            {\n               !this.props.backType && !this.props.firstPage ? (\n                  <div>\n                     <CAppBar \n                        handleDrawerToggle={this.handleDrawerToggle} \n                        setTitle={this.state.pageTitle} \n                        routePath={this.props.location.pathname}\n                        logout={this.tryLogout}\n                        {...this.props}  \n                     />\n      \n                     <nav className={classes.drawer}>\n                        <Hidden smUp implementation=\"css\">\n                           <Drawer\n                              container={this.props.container}\n                              variant=\"temporary\"\n                              anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                              open={this.state.mobileOpen}\n                              onClose={this.handleDrawerToggle}\n                              classes={{\n                                 paper: classes.drawerPaper\n                              }}\n                           >\n                           {drawer}\n                           </Drawer>\n                        </Hidden>\n                        <Hidden xsDown implementation=\"css\">\n                           <Drawer\n                           classes={{\n                              paper: classes.drawerPaper\n                           }}\n                           variant=\"permanent\"\n                           open\n                           >\n                           {drawer}\n                           </Drawer>\n                        </Hidden>\n                     </nav>\n                  </div>\n               ) : (\n                  <div>\n                      <CAppBar \n                        backType\n                        goBack={() => this.props.history.goBack()}\n                        setTitle={this.state.pageTitle}\n                        routePath={this.props.location.pathname}\n                        logout={this.tryLogout}\n                     />\n                  </div>\n               )\n            }\n\n            <main className={contentClass}>\n               <div className={classes.toolbar} />\n               {this.props.children}\n            </main>\n         </div>\n      )\n   }\n}\n\nCDrawerLayout.propTypes = {\n   classes: PropTypes.object.isRequired,\n   container: PropTypes.object,\n   theme: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles, { withTheme: true })(CDrawerLayout)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Modal';\nimport Paper from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport _ from 'lodash'\n\nconst styles = theme => ({\n    paper: {\n      position: 'absolute',\n      width: theme.spacing.unit * 50,\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing.unit * 4,\n      outline: 'none',\n    },\n})\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50\n    const left = 50\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    }\n}\n\nclass CConfirm extends React.Component {\n  render() {\n    \n    const { classes } = this.props\n\n    return (\n        <Modal\n            open={this.props.open}\n            onClose={this.props.onClose}\n        >\n            <div style={getModalStyle()} className={classes.paper}>\n                <Typography variant=\"h6\" id=\"modal-title\">\n                    {this.props.title}\n                </Typography>\n                <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n                    {this.props.message}\n                </Typography>\n\n                <div style={{ marginTop: 10 }}>\n                    {\n                        _.map(this.props.actions, action => {\n                            return <Button \n                                size=\"small\" color={action.actionType || 'default'} \n                                onClick={action.action}\n                                style={{ marginRight: 10 }}>\n                                {action.actionTitle}\n                            </Button>\n                        })\n                    }\n                </div>\n\n            </div>\n        </Modal>\n    )\n  }\n}\n\nCConfirm.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nconst CConfirmWrapped = withStyles(styles)(CConfirm);\n\nexport default CConfirmWrapped","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport _ from 'lodash'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport { _getOwnerDashboardData } from '../../rest/users.api'\nimport { Avatar } from \"@material-ui/core\";\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n      ...theme.mixins.gutters(),\n      paddingTop: theme.spacing.unit * 2,\n      paddingBottom: theme.spacing.unit * 2,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n})\n\nclass Dashboard extends React.Component {\n   state = {\n      dashboardData: [],\n      clinic_count: 0,\n      staff_count: 0,\n      patient_count: 0\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getOwnerDashboardData(data => {\n         this.setState({\n            clinic_count: data.clinic_count,\n            staff_count: data.staff_count,\n            patient_count: data.patient_count\n         })\n      })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <Grid container>\n            <Grid item md={4} xs={12}>\n               <Paper className={classes.root} elevation={1} style={{ marginBottom: 5 }}>\n                  <Typography variant=\"h5\" component=\"h3\">\n                     <strong>{this.state.clinic_count}</strong>\n                  </Typography>\n                  <Typography component=\"p\">\n                     Clinics\n                  </Typography>\n               </Paper>\n            </Grid>\n            <Grid item md={4} xs={12}>\n            <Paper className={classes.root} elevation={1} style={{ marginBottom: 5 }}>\n                  <Typography variant=\"h5\" component=\"h3\">\n                     <strong>{this.state.staff_count}</strong>\n                  </Typography>\n                  <Typography component=\"p\">\n                     Personnels\n                  </Typography>\n               </Paper>\n            </Grid>\n            <Grid item md={4} xs={12}>\n            <Paper className={classes.root} elevation={1} style={{ marginBottom: 5 }}>\n                  <Typography variant=\"h5\" component=\"h3\">\n                     <strong>{this.state.patient_count}</strong>\n                  </Typography>\n                  <Typography component=\"p\">\n                     Patients\n                  </Typography>\n               </Paper>\n            </Grid>\n         </Grid>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(Dashboard)","import _ from 'lodash'\n\nexport const REGISTER_CLINIC = ['MAIN_OWNER']\nexport const VIEW_DASHBOARD = ['MAIN_OWNER']\n\nexport const CLINIC_LIST = ['MAIN_OWNER', 'DOCTOR', 'STAFF']\nexport const DELETE_CLINIC = ['MAIN_OWNER']\n\nexport const roleQualified = (roles) => {\n    let currentRole = localStorage.getItem(\"rx\")\n    return _.includes(roles, currentRole)\n}","import { get, post, destroy } from '../rest'\n\nexport let _getClinics = (callback = null) => {\n  get('/api/v1/clinics')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getClinics', e)\n    })\n}\n\nexport let _getClinicsOwn = (callback = null) => {\n  get('/api/v1/clinics/own')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getClinicsOwn', e)\n    })\n}\n\nexport let _createClinic = (data, callback = null) => {\n  post('/api/v1/clinic', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinic', e)\n    })\n}\n\nexport let _saveClinic = (data, callback = null) => {\n  post('/api/v1/clinic', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinic', e)\n    })\n}\n\nexport let _deleteClinic = (clinicId, callback = null) => {\n  destroy(`/api/v1/clinic/${clinicId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deleteClinic', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid, Button } from '@material-ui/core'\nimport { ClinicCard, ActionBar, ClinicForm } from 'components'\nimport * as rule from '../Utils/RoleAccessConfig'\n\nimport _ from 'lodash'\nimport { RouteTo } from '../Utils/RouterAction'\nimport { _getClinicsOwn, _deleteClinic } from '../../rest/clinic.api'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass ManageClinics extends React.Component {\n\n   state = {\n      data: [],\n      openClinicForm: false\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getClinicsOwn(data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   deleteClinic = id => {\n      _deleteClinic(id, () => {\n         this.fetchData()\n      })\n   }\n\n   onCardClick = item => {\n      this.goTo('/clinic/' + item.id)\n   }\n   \n   goTo = path => {\n      RouteTo(this.props, path)\n   }\n\n   addNewClinic = val => {\n      this.setState({ openClinicForm: val })\n   }\n   \n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <div>\n\n            {\n               rule.roleQualified(rule.REGISTER_CLINIC) ? <ActionBar style={{ marginBottom: 10 }}>\n                  <Button color=\"primary\" onClick={() => this.addNewClinic(true)}>\n                     Register a new Clinic\n                  </Button>\n               </ActionBar> : null\n            }\n            \n            <Grid style={{ flexDirection: 'row' }} container>\n               {\n                  !_.isEmpty(this.state.data) ? (\n                     _.map(this.state.data, clinic => {\n                        return (\n                           <Grid item lg={4} md={6} xs={12}>\n                              <ClinicCard \n                                 data={clinic} \n                                 onClick={() => this.onCardClick(clinic)} \n                                 onDelete={() => this.deleteClinic(clinic.id)} \n                              />\n                           </Grid>\n                        )\n                     })\n                  ) : <Typography style={{ fontSize: 30, color: 'gray' }}>No clinic(s)</Typography>\n               }   \n            </Grid>\n\n            {\n               rule.roleQualified(rule.REGISTER_CLINIC) ? <ClinicForm \n                  open={this.state.openClinicForm} \n                  closeForm={() => this.addNewClinic(false)} \n                  refreshList={() => this.fetchData()}   \n               /> : null\n            }\n\n         </div>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(ManageClinics)","import { get, post, destroy } from '../rest'\n\nexport let _getClinicUsers = (callback = null) => {\n  get('/api/v1/clinic_users')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getClinicUsers', e)\n    })\n}\n\nexport let _createClinicUser = (data, callback = null) => {\n  post('/api/v1/clinic_user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinicUser', e)\n    })\n}\n\nexport let _saveClinicUser = (data, callback = null) => {\n  post('/api/v1/clinic_user', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _saveClinicUser', e)\n    })\n}\n\nexport let _deleteClinicUser = (clinic_userId, callback = null) => {\n  destroy(`/api/v1/clinic_user/${clinic_userId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deleteClinicUser', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport { ActionBar, UserForm, ClinicUserForm } from 'components'\nimport { _createUser, _getUsers, _deleteUser } from '../../rest/users.api'\nimport { _deleteClinicUser } from '../../rest/clinic_user.api'\n\nimport { CConfirm } from 'components'\n\nimport _ from 'lodash'\nimport { truncateSync } from \"fs\";\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   heading: {\n      textTransform: 'uppercase'\n   }\n})\n\nclass ManageUsers extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      showRegistration: false,\n      showUserRole: false,\n      deleteRoleOpen: false,\n      deleteUserOpen: false,\n      selectedUserID: '',\n      selectedRoleID: ''\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getUsers(data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   showRegistration = val => {\n      this.setState({ showRegistration: val })\n   }\n\n   showUserRole = (val, userID) => {\n      this.setState({ showUserRole: val, selectedUserID: userID })\n   }\n\n   onDeleteRole = (val, roleID) => {\n      this.setState({ deleteRoleOpen: val, selectedRoleID: roleID })\n   }\n\n   onDeleteUser = (val, userID) => {\n      this.setState({ deleteUserOpen: val, selectedUserID: userID })\n   }\n\n   deleteRoleSuccess = () => {\n      _deleteClinicUser(this.state.selectedRoleID, () => {\n         this.fetchData()\n         this.onDeleteRole(false, '')\n      })\n   }\n\n   deleteUserSuccess = () => {\n      _deleteUser(this.state.selectedUserID, () => {\n         this.fetchData()\n         this.onDeleteUser(false, '')\n      })\n   }\n\n   render() {\n      const { classes, theme } = this.props\n      const { expanded } = this.state\n\n      return (\n         <div className={classes.root}>\n\n            <ActionBar style={{ marginBottom: 10 }}>\n               <Button color=\"primary\" onClick={() => this.showRegistration(true)}>\n                  Register a User\n               </Button>\n            </ActionBar>\n\n            {\n               _.map(this.state.data, (record, idx) => {\n                  return <ExpansionPanel>\n                     <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.heading}><strong>{record.user.lastname}, {record.user.firstname} {record.user.middlename} ({record.user.role})</strong></Typography>\n                     </ExpansionPanelSummary>\n                     <ExpansionPanelDetails>\n                        <Grid container spacing={8}>\n                           <Grid item md={6} style={{ width: '100%' }}>\n                              <Paper>\n                                 <Table>\n                                    <TableBody>\n                                       <TableRow>\n                                          <TableCell>\n                                             <strong>Email</strong>\n                                          </TableCell>\n                                          <TableCell>{record.user.email}</TableCell>\n                                       </TableRow>\n                                       <TableRow>\n                                          <TableCell>\n                                          <strong>Birthdate</strong>\n                                          </TableCell>\n                                          <TableCell>{record.user.dob}</TableCell>\n                                       </TableRow>\n                                       <TableRow>\n                                          <TableCell>\n                                          <strong>Contact</strong>\n                                          </TableCell>\n                                          <TableCell>{record.user.contact_no}</TableCell>\n                                       </TableRow>\n                                    </TableBody>\n                                 </Table>\n                              </Paper>\n                           </Grid>\n                           <Grid item md={6} style={{ width: '100%' }}>\n                              <Paper>\n                                 <Table>\n                                    <TableBody>\n\n                                       {\n                                          _.map(record.roles, role => {\n                                             return <TableRow>\n                                             <TableCell>\n                                                <strong>{role.clinic.clinic_name}</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}>\n                                                <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteRole(true, role.id)}>\n                                                   REMOVE\n                                                </Button>\n                                             </TableCell>\n                                          </TableRow>\n                                          })\n                                       }\n                                       \n                                    </TableBody>\n                                 </Table>\n                              </Paper>\n                           </Grid>\n                        </Grid>\n\n                     </ExpansionPanelDetails>\n                     <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                        {\n                           record.user.role !== 'MAIN_OWNER' ? <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteUser(true, record.user.id)}>\n                              DELETE USER\n                           </Button> : null\n                        }\n                        \n\n                        <Button size=\"small\" color=\"primary\" onClick={() => this.showUserRole(true, record.user.id)}>\n                           Assign to a clinic\n                        </Button>\n                     </ExpansionPanelActions>\n                  </ExpansionPanel>\n               })\n            }\n            \n            <UserForm \n               open={this.state.showRegistration} \n               closeForm={() => this.showRegistration(false)} \n               refreshList={() => this.fetchData()}   \n            />\n\n            <ClinicUserForm \n               open={this.state.showUserRole} \n               closeForm={() => this.showUserRole(false)}\n               userID={this.state.selectedUserID}\n               refreshList={() => this.fetchData()}   \n            />\n\n            <CConfirm\n               open={this.state.deleteRoleOpen}\n               onClose={() => this.onDeleteRole(false, '')}\n               onOk={() => this.onDeleteRole(false, '')}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteRoleSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteRole(false, ''), actionType: 'secondary' }\n               ]}\n            />\n\n            <CConfirm\n               open={this.state.deleteUserOpen}\n               onClose={() => this.deleteCardOpen(false)}\n               onOk={() => this.deleteCardOpen(false)}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteUserSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteUser(false, ''), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nManageUsers.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(ManageUsers)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\nimport _ from 'lodash'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass Settings extends React.Component {\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <div className={classes.root}>\n\n         </div>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(Settings)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport { Appointments, Patients } from 'components'\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 15 }}>\n      {props.children}\n    </Typography>\n  )\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  }\n})\n\nclass ClinicDashboard extends React.Component {\n  state = {\n    value: 0\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Tabs value={value} onChange={this.handleChange}>\n            <Tab label=\"Patients\" />\n            {/* <Tab label=\"Appointments\" /> */}\n          </Tabs>\n        </AppBar>\n        {value === 0 && <TabContainer>\n            <Patients {...this.props} />\n        </TabContainer>}\n        {value === 1 && <TabContainer>\n            <Appointments {...this.props} />\n        </TabContainer>}\n      </div>\n    );\n  }\n}\n\nClinicDashboard.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(ClinicDashboard)","import { get, post, destroy, patch } from '../rest'\n\nexport let _getPatient = (patientID, callback = null) => {\n  get('/api/v1/patient/' + patientID)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatient', e)\n    })\n}\n\nexport let _getPatients = (search = '', callback = null) => {\n  get('/api/v1/patients', { search })\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatients', e)\n    })\n}\n\nexport let _getPatientsByClinic = (clinicID, search = '', callback = null) => {\n  get(`/api/v1/patients/by_clinic/${clinicID}?search=${search}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientsByClinic', e)\n    })\n}\n\nexport let _createPatient = (data, callback = null) => {\n  post('/api/v1/patient', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _savePatient', e)\n    })\n}\n\nexport let _savePatient = (data, callback = null) => {\n  post('/api/v1/patient', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _savePatient', e)\n    })\n}\n\nexport let _updatePatient = (data, callback = null) => {\n  patch('/api/v1/patient', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _updatePatient', e)\n    })\n}\n\nexport let _updatePatientPast = (data, callback = null) => {\n  patch('/api/v1/patient_past', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _updatePatientPast', e)\n    })\n}\n\nexport let _deletePatient = (patientId, callback = null) => {\n  destroy(`/api/v1/patient/${patientId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deletePatient', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Grid, Typography } from '@material-ui/core'\nimport Button from '@material-ui/core/Button';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase'\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\n\nimport { RouteTo } from '../Utils/RouterAction'\nimport { PatientForm } from 'components'\nimport { _getPatientsByClinic } from '../../rest/patient.api'\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport moment from 'moment'\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   searchRoot: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   input: {\n      marginLeft: 8,\n      flex: 1,\n      width: '100%'\n   },\n   iconButton: {\n      padding: 10,\n   },\n   avatar: {\n      margin: 10,\n   },\n   orangeAvatar: {\n      color: '#fff',\n      backgroundColor: deepOrange[500],\n   },\n   purpleAvatar: {\n      color: '#fff',\n      backgroundColor: deepPurple[500],\n   },\n})\nfunction ListItemLink(props) {\n   return <ListItem button component=\"a\" {...props} />;\n}\n \nclass Patients extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      openPatientForm: false,\n      search: ''\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   searchPatient = search => {\n      this.setState({ search: search.target.value }, () => this.fetchData())\n   }\n\n   fetchData = () => {\n      _getPatientsByClinic(this.props.match.params.clinicID, this.state.search, data => {\n         this.setState({ data })\n      })\n   }\n\n   openPatientForm = val => {\n      this.setState({ openPatientForm: val })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   patientSelect = record => {\n      this.goTo('/patient/' + record.id)\n   }\n\n   goTo = path => {\n      RouteTo(this.props, path)\n   }\n\n   render() {\n      const { classes, theme } = this.props\n      const { expanded } = this.state\n      \n      return (\n         <div className={classes.root}>\n            <Grid container>\n               <Grid item md={10} xs={8}>\n                  <Paper className={classes.searchRoot} style={{ marginBottom: 10, paddingLeft: 10 }}>\n                     <InputBase className={classes.input} placeholder=\"Search patient\" onChange={val => this.searchPatient(val)} />\n                  </Paper>\n               </Grid>\n               <Grid item md={2} xs={4} style={{ paddingLeft: 10 }}>\n                  <Button variant=\"contained\" color=\"primary\" style={{ width: '100%' }} onClick={() => this.openPatientForm(true)}>ADD PATIENT</Button>\n               </Grid>\n            </Grid>\n\n            <Paper className={classes.root}>\n               <Table className={classes.table}>\n               <TableHead>\n                  <TableRow>\n                     <TableCell><Typography style={{ fontWeight: 'bold' }}>Fullname</Typography></TableCell>\n                     <TableCell><Typography style={{ fontWeight: 'bold' }}>Gender</Typography></TableCell>\n                     <TableCell><Typography style={{ fontWeight: 'bold' }}>DOB</Typography></TableCell>\n                     <TableCell><Typography style={{ fontWeight: 'bold' }}>Last Vist</Typography></TableCell>\n                  </TableRow>\n               </TableHead>\n               <TableBody>\n                  {\n                     _.map(this.state.data, (record, idx) => {\n                        let avatarClass = record.gender === 'MALE' ? classes.purpleAvatar : classes.orangeAvatar\n                        let genderChar = !_.isEmpty(record.gender) ? record.gender[0] : '--'\n                        return <TableRow onClick={() => this.patientSelect(record)} style={{ cursor: 'pointer' }} hover>\n                           <TableCell><Typography>{record.fullname}</Typography></TableCell>\n                           <TableCell style={{ width: 100 }}><Typography>{record.gender}</Typography></TableCell>\n                           <TableCell><Typography>{ !_.isEmpty(record.dob) ? moment(record.dob).format(\"MM/DD/YYYY\") : '--' }</Typography></TableCell>\n                           <TableCell><Typography>{ !_.isEmpty(record.last_visit_date) ? moment(record.last_visit_date).format(\"MM/DD/YYYY\") : '--' }</Typography></TableCell>\n                        </TableRow>\n                     })\n                  }\n               </TableBody>\n               </Table>\n            </Paper>\n\n            <PatientForm \n               open={this.state.openPatientForm} \n               closeForm={() => this.openPatientForm(false)}\n               refreshList={() => this.fetchData()}\n               {...this.props}\n            />\n            \n         </div>\n      )\n   }\n}\n\nPatients.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(Patients)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\nimport DoneIcon from '@material-ui/icons/Done';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   searchRoot: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   input: {\n      marginLeft: 8,\n      flex: 1,\n      width: '100%'\n   },\n   iconButton: {\n      padding: 10,\n   },\n})\n\nclass Appointments extends React.Component {\n   state = {\n      expanded: 0,\n      data: []\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = [\n         { id: 3, \n            employee_name: 'Micah Lumaad', \n            email: 'micahlumaad@gmail.com', \n            dob: '05/13/1990', \n            gender: 'male', \n            contact: '+639255055519',\n            clinics: [\n               { id: 1, clinic_name: 'Ace Dermatology', role: 'SF' },\n               { id: 2, clinic_name: 'Ace Dental Clinic', role: 'SF' },\n         ]},\n         { id: 1, \n            employee_name: 'Ace Jordan Lumaad', \n            email: 'acelumaad@gmail.com', \n            dob: '03/13/1990', \n            gender: 'male',\n            contact: '+639255055519',\n            clinics: [\n               { id: 1, clinic_name: 'Ace Dermatology', role: 'OR' },\n               { id: 2, clinic_name: 'Ace Dermatology', role: 'DR' },\n               { id: 3, clinic_name: 'Ace Dental Clinic', role: 'SF' },\n         ]},\n         { id: 2, \n            employee_name: 'Gwen Lumaad', \n            email: 'gwenlumaad@gmail.com', \n            dob: '01/13/1990', \n            gender: 'female', \n            contact: '+639255055519',\n            clinics: [\n               { id: 1, clinic_name: 'Ace Dermatology', role: 'DR' },\n               { id: 2, clinic_name: 'Ace Dental Clinic', role: 'DR' },\n         ]},\n\n      ]\n\n      this.setState({\n         data\n      })\n   }\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   render() {\n      const { classes, theme } = this.props\n      const { expanded } = this.state\n\n      return (\n         <div className={classes.root}>\n\n            <Paper className={classes.searchRoot} style={{ marginBottom: 10, paddingLeft: 10 }}>\n               <InputBase className={classes.input} placeholder=\"Search patients\" />\n               <IconButton className={classes.iconButton} aria-label=\"Search\">\n                  <SearchIcon />\n               </IconButton>\n            </Paper>\n\n            {\n               _.map(this.state.data, (record, idx) => {\n                  return <ExpansionPanel>\n                     <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.heading}><strong>{record.employee_name}</strong></Typography>\n                     </ExpansionPanelSummary>\n                     <ExpansionPanelDetails style={{ padding: 0 }}>\n                        <Table>\n                           <TableBody>\n                              <TableRow>\n                                 <TableCell>\n                                    <strong>Email</strong>\n                                 </TableCell>\n                                 <TableCell>{record.email}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                 <TableCell>\n                                 <strong>Birthdate</strong>\n                                 </TableCell>\n                                 <TableCell>{record.dob}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                 <TableCell>\n                                 <strong>Gender</strong>\n                                 </TableCell>\n                                 <TableCell>{record.gender}</TableCell>\n                              </TableRow>\n                              <TableRow>\n                                 <TableCell>\n                                 <strong>Contact</strong>\n                                 </TableCell>\n                                 <TableCell>{record.contact}</TableCell>\n                              </TableRow>\n                           </TableBody>\n                        </Table>\n                     </ExpansionPanelDetails>\n                     <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                        <Button size=\"small\" color=\"primary\">EDIT</Button>\n                        <Button size=\"small\" color=\"secondary\">\n                           REMOVE\n                        </Button>\n                     </ExpansionPanelActions>\n                  </ExpansionPanel>\n               })\n            }\n            \n         </div>\n      )\n   }\n}\n\nAppointments.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(Appointments)","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport { _getPatient } from '../../rest/patient.api'\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport { PatientInformation, PatientHistory, PatientVaccination, PatientPastHistory } from 'components'\nimport _ from 'lodash'\nimport moment from 'moment'\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\">\n      {props.children}\n    </Typography>\n  )\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  orangeAvatar: {\n      color: '#fff',\n      backgroundColor: deepOrange[500],\n  },\n  purpleAvatar: {\n      color: '#fff',\n      backgroundColor: deepPurple[500],\n  },\n})\n\nclass PatientDashboard extends React.Component {\n  state = {\n    value: 0,\n    patient: {}\n  }\n\n  componentDidMount(){\n    this.fetchPatient()\n  }\n\n  fetchPatient = () => {\n    _getPatient(this.props.match.params.patientID, data => {\n      this.fetchPatientSuccess(data)\n    })\n  }\n\n  fetchPatientSuccess = patient => {\n    this.setState({ patient })\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  }\n\n  render() {\n      const { classes } = this.props;\n      const { value } = this.state;\n\n      let patient = {\n         id: this.state.patient.id,\n         patient_name: this.state.patient.fullname + ' (' + moment().diff(this.state.patient.dob, 'years') + ' y.o)',\n         details: this.state.patient.gender + ' | ' + moment(this.state.patient.dob).format(\"MM/DD/YYYY\")\n      }\n\n      let avatarClass = this.state.patient.gender === 'MALE' ? classes.purpleAvatar : classes.orangeAvatar\n      let genderChar = !_.isEmpty(this.state.patient.gender) ? this.state.patient.gender[0] : '--'\n      \n    return (\n      <div className={classes.root}>\n\n        <div>\n          <Fragment key={patient.id}>\n              <ListItem button>\n                <Avatar className={avatarClass}>{ genderChar || '--' }</Avatar>\n                <ListItemText primary={patient.patient_name} secondary={patient.details} />\n              </ListItem>\n          </Fragment>\n          <AppBar position=\"static\">\n              <Tabs value={value} onChange={this.handleChange}>\n                <Tab label=\"History\" />\n                <Tab label=\"Vaccinations\" />\n                <Tab label=\"Past History\" />\n                <Tab label=\"Information\" />\n              </Tabs>\n          </AppBar>\n        </div>\n        <div>\n          {value === 0 && <TabContainer>\n                <PatientHistory {...this.props} />\n          </TabContainer>}\n          {value === 1 && <TabContainer>\n                <PatientVaccination {...this.props} />\n          </TabContainer>}\n          {value === 2 && <TabContainer>\n              <PatientPastHistory \n                  fetchPatient={this.fetchPatient} \n                  patient={this.state.patient} \n                  {...this.props} \n                />\n          </TabContainer>}\n          {value === 3 && <TabContainer>\n                <PatientInformation \n                  fetchPatient={this.fetchPatient} \n                  patient={this.state.patient} \n                  {...this.props} \n                />\n          </TabContainer>}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nPatientDashboard.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(PatientDashboard)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport { DatePicker } from \"material-ui-pickers\"\nimport { TextField } from '@material-ui/core'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport { CConfirm } from 'components'\n\nimport { _updatePatient } from '../../rest/patient.api'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   }\n})\n\nclass PatientInformation extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      form: {},\n      confirm: false\n   }\n   \n   componentDidMount(){\n      this.fetchFromProps(this.props)\n   }\n\n   componentWillReceiveProps(props){\n      this.fetchFromProps(props)\n   }\n   \n   showPopup = val => {\n      this.setState({ confirm: val })\n   }\n\n   fetchFromProps = data => {\n      if(!_.isEmpty(data.patient)){\n         this.setState({ form: data.patient })\n      }\n   }\n\n   submitForm = () => {\n      let form = this.state.form;\n\n      form['patient_id'] = this.props.match.params.patientID\n\n      _updatePatient(form, () => {\n         this.showPopup(false)\n         this.props.fetchPatient()\n      })\n   }\n   \n   handleDateChange = (field, e) => {\n      let form = this.state.form\n      form[field] = moment(e).format(\"MM/DD/YYYY\")\n      \n      this.setState({\n         form\n      })\n   }\n\n   handleChange = (field, e) => {\n      let form = this.state.form\n      form[field] = e.target.value\n      \n      this.setState({\n         form\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root} style={{ padding: 10 }}>\n            <Paper elevation={2} style={{ padding: 20 }}>\n               <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                  Patient Information\n               </Typography>\n               <form noValidate autoComplete=\"off\">\n                  <Grid container spacing={16}>\n                        <Grid item md={4} xs={12}>\n                           <TextField\n                              id=\"lastname\"\n                              label=\"Lastname\"\n                              placeholder=\"Enter Lastname\"\n                              fullWidth\n                              margin=\"dense\"\n                              value={this.state.form.lastname}\n                              variant=\"outlined\"\n                              onChange={value => this.handleChange('lastname', value)}\n                              required={true}\n                              InputLabelProps={{\n                                    shrink: true,\n                              }}\n                              inputProps={{ autoCapitalize: true }}\n                           />\n                        </Grid>\n                        <Grid item md={4} xs={12}>\n                           <TextField\n                              id=\"firstname\"\n                              label=\"Firstname\"\n                              placeholder=\"Enter Firstname\"\n                              fullWidth\n                              value={this.state.form.firstname}\n                              required={true}\n                              margin=\"dense\"\n                              onChange={value => this.handleChange('firstname', value)}\n                              variant=\"outlined\"\n                              InputLabelProps={{\n                                    shrink: true,\n                              }}\n                           />\n                        </Grid>\n                        <Grid item md={4} xs={12}>\n                           <TextField\n                              id=\"middlename\"\n                              label=\"Middlename\"\n                              value={this.state.form.middlename}\n                              placeholder=\"Enter Middlename\"\n                              onChange={value => this.handleChange('middlename', value)}\n                              fullWidth\n                              required={true}\n                              margin=\"dense\"\n                              variant=\"outlined\"\n                              InputLabelProps={{\n                                    shrink: true,\n                              }}\n                           />\n                        </Grid>\n                  </Grid>\n\n                  <DatePicker\n                        keyboard\n                        label=\"Birthdate\"\n                        format={\"MM/DD/YYYY\"}\n                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                        mask={value =>\n                        // handle clearing outside if value can be changed outside of the component\n                        value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                        }\n                        value={this.state.form.dob}\n                        onChange={value => this.handleDateChange('dob', value)}\n                        fullWidth\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                        shrink: true,\n                        }}\n                  />\n\n                  <TextField\n                     id=\"address\"\n                     label=\"Address\"\n                     placeholder=\"Enter Address\"\n                     fullWidth\n                     margin=\"dense\"\n                     value={this.state.form.address}\n                     variant=\"outlined\"\n                     onChange={value => this.handleChange('address', value)}\n                     required={true}\n                     InputLabelProps={{\n                           shrink: true,\n                     }}\n                     inputProps={{ autoCapitalize: true }}\n                  />\n\n                  <TextField\n                        id=\"contact\"\n                        label=\"Contact Number\"\n                        placeholder=\"Enter Contact Number\"\n                        onChange={value => this.handleChange('contact_no', value)}\n                        fullWidth\n                        value={this.state.form.contact_no}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n                  <TextField\n                     id=\"gender\"\n                     select\n                     label=\"Gender\"\n                     onChange={value => this.handleChange('gender', value)}\n                     value={this.state.form.gender}\n                     SelectProps={{\n                        MenuProps: {\n                        className: classes.menu,\n                        },\n                     }}\n                     fullWidth\n                     required={true}\n                     margin=\"dense\"\n                     variant=\"outlined\"\n                     InputLabelProps={{\n                           shrink: true,\n                     }}>\n                     <MenuItem value={'MALE'}>MALE</MenuItem>\n                     <MenuItem value={'FEMALE'}>FEMALE</MenuItem>\n                  </TextField>\n\n                  <TextField\n                        id=\"father_name\"\n                        label=\"Father Name\"\n                        placeholder=\"Enter Father Name\"\n                        onChange={value => this.handleChange('father_name', value)}\n                        fullWidth\n                        value={this.state.form.father_name}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n                  <TextField\n                        id=\"father_occupation\"\n                        label=\"Father Occupation\"\n                        placeholder=\"Enter Father Occupation\"\n                        onChange={value => this.handleChange('father_occupation', value)}\n                        fullWidth\n                        value={this.state.form.father_occupation}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n                  <TextField\n                        id=\"mother_name\"\n                        label=\"Mother Name\"\n                        placeholder=\"Enter Mother Name\"\n                        onChange={value => this.handleChange('mother_name', value)}\n                        fullWidth\n                        value={this.state.form.mother_name}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n\n\n                  <TextField\n                        id=\"mother_occupation\"\n                        label=\"Mother Occupation\"\n                        placeholder=\"Enter Mother Occupation\"\n                        onChange={value => this.handleChange('mother_occupation', value)}\n                        fullWidth\n                        value={this.state.form.mother_occupation}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n                  <Grid container>\n                        <Grid item md={6} xs={6}>\n                           <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                              Submit Updates\n                           </Button>\n                        </Grid>\n                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                        </Grid>\n                  </Grid>\n               </form>\n\n               <CConfirm\n                  open={this.state.confirm}\n                  onClose={() => this.showPopup(false)}\n                  onOk={() => this.showPopup(false)}\n                  title={'Update Patient Confirmation'}\n                  message={'Are sure you want to save this patient information changes?'}\n                  actions={[\n                     { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                     { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                  ]}\n               />\n            </Paper>\n         </div>\n      )\n   }\n}\n\nPatientInformation.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientInformation)","import { get, post, destroy } from '../rest'\n\nexport let _getPatientHistories = (callback = null) => {\n  get('/api/v1/patient_histories')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientHistories', e)\n    })\n}\n\nexport let _getPatientHistoriesByPatient = (patientID, callback = null) => {\n  get(`/api/v1/patient_history/patient/${patientID}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientHistories', e)\n    })\n}\n\nexport let _getPatientHistory = (id, callback = null) => {\n  get(`/api/v1/patient_history/${id}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientHistory', e)\n    })\n}\n\nexport let _createPatientHistory = (data, callback = null) => {\n  post('/api/v1/patient_history', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _createPatientHistory', e)\n    })\n}\n\nexport let _deletePatientHistory = (patient_historyId, callback = null) => {\n  destroy(`/api/v1/patient_history/${patient_historyId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deletePatientHistory', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { unstable_Box as Box } from '@material-ui/core/Box'\n\nimport { ActionBar, PatientHistoryForm } from 'components'\nimport { _getPatientHistoriesByPatient, _deletePatientHistory } from '../../rest/patient_history.api'\n\nimport { CConfirm } from 'components'\n\nimport moment from 'moment'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   heading: {\n      textTransform: 'uppercase'\n   }\n})\n\nclass PatientHistory extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      openDataForm: false,\n      selectedDataID: '',\n      selectedData: {},\n      mode: 'add'\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getPatientHistoriesByPatient(this.props.match.params.patientID, data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   openDataForm = val => {\n      this.setState({ mode: 'add', selectedData: {}, openDataForm: val })\n   }\n\n   onEditData = (val, data) => {\n      this.setState({ mode: 'edit', selectedData: data, openDataForm: val  })\n   }\n\n   onDeleteData = (val, dataID) => {\n      this.setState({ confirmDelete: val, selectedDataID: dataID })\n   }\n\n   deleteDataSuccess = () => {\n      _deletePatientHistory(this.state.selectedDataID, () => {\n         this.fetchData()\n         this.onDeleteData(false, '')\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n      \n      return (\n         <div className={classes.root} style={{ padding: 10 }}>\n            \n            <Paper elevation={2} style={{ padding: 20 }}>\n               <Grid container>\n                  <Grid item>\n                     <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                        Patient History\n                     </Typography>\n                  </Grid>\n                  <Grid item style={{ justifyContent: 'flex-end', textAlign: 'right' }}>\n                     <ActionBar style={{ marginBottom: 10 }}>\n                        <Button color=\"primary\" onClick={() => this.openDataForm(true)}>\n                           Add New History Record\n                        </Button>\n                     </ActionBar>\n                  </Grid>\n               </Grid>\n\n               {\n                  !_.isEmpty(this.state.data) ? (\n                  _.map(this.state.data, (record, idx) => {\n\n                     let expanded = idx == 0 ? true : null\n                     let bgColor = idx == 0 ? '#e0f1ff80' : '#fff'\n\n                     return <ExpansionPanel expanded={expanded} style={{ backgroundColor: bgColor }}>\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                           <Typography className={classes.heading}><strong>{moment(record.visit_datetime).format(\"MM/DD/YYYY\")} - {record.chief_complaint}</strong></Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                           <Paper style={{ marginBottom: 10, width: '100%' }}>\n                              <Grid container display=\"block\">\n                                 <Grid item md={4} xs={12} style={{ paddingRight: 5 }}>\n                                    <Table>\n                                       <TableBody>\n                                          <TableRow>\n                                             <TableCell>\n                                                <strong>Chief Complaint</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}><p style={{ whiteSpace: 'pre-line' }}>{record.chief_complaint || 'N/A'}</p></TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                             <strong>History of Illness</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}><p style={{ whiteSpace: 'pre-line' }}>{record.history_present_illness || 'N/A'}</p></TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                             <strong>Physical Exam</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}><p style={{ whiteSpace: 'pre-line' }}>{record.physical_exam || 'N/A' }</p></TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                             <strong>Diagnosis</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}><p style={{ whiteSpace: 'pre-line' }}>{record.diagnosis || 'N/A'}</p></TableCell>\n                                          </TableRow>\n                                       </TableBody>\n                                    </Table>\n                                 </Grid>\n                                 <Grid item md={4} xs={12} style={{ paddingLeft: 5 }}>\n                                    <Table>\n                                       <TableBody>\n                                          <TableRow>\n                                             <TableCell>\n                                                <strong>Weight/Height</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}>{record.init_weight || '--'} kg / {record.init_height || '--'} cm</TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                                <strong>Head Circumference</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}>{record.init_head_circumference || '--'} cm</TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                             <strong>Temperature</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}>{record.init_temp || '--'} C</TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                             <strong>Pulse</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}>{record.init_pulse_rate || '--'} bpm</TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                             <strong>Respiratory</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}>{record.init_resp_rate || '--'} bpm</TableCell>\n                                          </TableRow>\n                                       </TableBody>\n                                    </Table>\n                                 </Grid>\n                                 <Grid item md={4} xs={12} style={{ paddingLeft: 5 }}>\n                                    <Table>\n                                       <TableBody>\n                                          <TableRow>\n                                             <TableCell>\n                                                <strong>Medications</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}><p style={{ whiteSpace: 'pre-line' }}>{record.medications || '--'}</p></TableCell>\n                                          </TableRow>\n                                          <TableRow>\n                                             <TableCell>\n                                             <strong>Diagnostics/Labs</strong>\n                                             </TableCell>\n                                             <TableCell style={{ textAlign: 'right' }}><p style={{ whiteSpace: 'pre-line' }}>{record.diagnostics || '--'}</p></TableCell>\n                                          </TableRow>\n                                       </TableBody>\n                                    </Table>\n                                 </Grid>\n                              </Grid>\n                           </Paper>\n                        </ExpansionPanelDetails>\n                        <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                           <Button size=\"small\" color=\"primary\" onClick={() => this.onEditData(true, record)}>\n                              EDIT RECORD\n                           </Button>\n                           <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteData(true, record.id)}>\n                              DELETE RECORD\n                           </Button>\n                        </ExpansionPanelActions>\n                     </ExpansionPanel>\n                  }) ) : <Typography style={{ color: 'rgb(169, 169, 169)' }} variant=\"h5\">No patient history data</Typography>\n               }\n            </Paper>\n            \n            <PatientHistoryForm \n               open={this.state.openDataForm} \n               closeForm={() => this.openDataForm(false)} \n               refreshList={() => this.fetchData()}\n               dataID={this.props.match.params.patientID}\n               mode={this.state.mode}\n               data={this.state.selectedData}\n            />\n\n            <CConfirm\n               open={this.state.confirmDelete}\n               onClose={() => this.onDeleteData(false, '')}\n               onOk={() => this.onDeleteData(false, '')}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteDataSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteData(false, ''), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nPatientHistory.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientHistory)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport { DatePicker } from \"material-ui-pickers\"\nimport { TextField } from '@material-ui/core'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport { CConfirm } from 'components'\n\nimport { _updatePatientPast } from '../../rest/patient.api'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   }\n})\n\nclass PatientPastHistory extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      form: {},\n      confirm: false\n   }\n   \n   componentDidMount(){\n      this.fetchFromProps(this.props)\n   }\n\n   componentWillReceiveProps(props){\n      this.fetchFromProps(props)\n   }\n   \n   showPopup = val => {\n      this.setState({ confirm: val })\n   }\n\n   fetchFromProps = data => {\n      if(!_.isEmpty(data.patient)){\n         this.setState({ form: data.patient })\n      }\n   }\n\n   submitForm = () => {\n      let form = this.state.form;\n\n      form['patient_id'] = this.props.match.params.patientID\n\n      _updatePatientPast(form, () => {\n         this.showPopup(false)\n         this.props.fetchPatient()\n      })\n   }\n   \n   handleDateChange = (field, e) => {\n      let form = this.state.form\n      form[field] = moment(e).format(\"MM/DD/YYYY\")\n      \n      this.setState({\n         form\n      })\n   }\n\n   handleChange = (field, e) => {\n      let form = this.state.form\n      form[field] = e.target.value\n      \n      this.setState({\n         form\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root} style={{ padding: 10 }}>\n            <Paper elevation={2} style={{ padding: 20 }}>\n               <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                  Patient Past History\n               </Typography>\n               <form noValidate autoComplete=\"off\">\n\n                  <TextField\n                        id=\"personal_history\"\n                        label=\"Personal History\"\n                        placeholder=\"Enter Personal History\"\n                        onChange={value => this.handleChange('personal_history', value)}\n                        fullWidth\n                        multiline\n                        value={this.state.form.personal_history}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n                  <TextField\n                        id=\"family_history\"\n                        label=\"Family History\"\n                        placeholder=\"Enter Family History\"\n                        onChange={value => this.handleChange('family_history', value)}\n                        fullWidth\n                        multiline\n                        value={this.state.form.family_history}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n                  <TextField\n                        id=\"allergies\"\n                        label=\"Food/Drug Allergies\"\n                        placeholder=\"Food/Drug Allergies\"\n                        onChange={value => this.handleChange('allergies', value)}\n                        fullWidth\n                        multiline\n                        value={this.state.form.allergies}\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                           shrink: true,\n                        }}\n                  />\n\n                  <Grid container>\n                        <Grid item md={6} xs={6}>\n                           <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                              Submit Updates\n                           </Button>\n                        </Grid>\n                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                        </Grid>\n                  </Grid>\n               </form>\n\n               <CConfirm\n                  open={this.state.confirm}\n                  onClose={() => this.showPopup(false)}\n                  onOk={() => this.showPopup(false)}\n                  title={'Update Past History Confirmation'}\n                  message={'Are sure you want to save this past history changes?'}\n                  actions={[\n                     { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                     { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                  ]}\n               />\n            </Paper>\n         </div>\n      )\n   }\n}\n\nPatientPastHistory.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientPastHistory)","import { get, post, destroy } from '../rest'\n\nexport let _getPatientVaccinations = (callback = null) => {\n  get('/api/v1/patient_vaccinations')\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientVaccinations', e)\n    })\n}\n\nexport let _getPatientVaccinationsByPatient = (patientID, callback = null) => {\n  get(`/api/v1/patient_vaccination/patient/${patientID}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientVaccinations', e)\n    })\n}\n\nexport let _getPatientVaccination = (id, callback = null) => {\n  get(`/api/v1/patient_vaccination/${id}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _getPatientVaccination', e)\n    })\n}\n\nexport let _createPatientVaccination = (data, callback = null) => {\n  post('/api/v1/patient_vaccination', data)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _createPatientVaccination', e)\n    })\n}\n\nexport let _deletePatientVaccination = (patient_vaccinationId, callback = null) => {\n  destroy(`/api/v1/patient_vaccination/${patient_vaccinationId}`)\n    .then(response => {\n      if (callback) callback(response.data)\n    })\n    .catch(e => {\n      console.log('Error in _deletePatientVaccination', e)\n    })\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { ActionBar, PatientVaccinationForm } from 'components'\nimport { _getPatientVaccinationsByPatient, _deletePatientVaccination } from '../../rest/patient_vaccination.api'\n\nimport { CConfirm } from 'components'\n\nimport moment from 'moment'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n     margin: theme.spacing.unit,\n   },\n   heading: {\n      textTransform: 'uppercase'\n   }\n})\n\nclass PatientVaccination extends React.Component {\n   state = {\n      expanded: 0,\n      data: [],\n      openDataForm: false,\n      selectedDataID: '',\n      selectedData: {},\n      mode: 'add'\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      _getPatientVaccinationsByPatient(this.props.match.params.patientID, data => {\n         this.setState({\n            data\n         })\n      })\n   }\n\n   handleChange = panel => (event, expanded) => {\n      this.setState({\n        expanded: expanded ? panel : false,\n      })\n   }\n\n   handleDelete = () => {\n      alert('You clicked the delete icon.')\n   }\n\n   openDataForm = val => {\n      this.setState({ mode: 'add', selectedData: {}, openDataForm: val })\n   }\n\n   onEditData = (val, data) => {\n      this.setState({ mode: 'edit', selectedData: data, openDataForm: val  })\n   }\n\n   onDeleteData = (val, dataID) => {\n      this.setState({ confirmDelete: val, selectedDataID: dataID })\n   }\n\n   deleteDataSuccess = () => {\n      _deletePatientVaccination(this.state.selectedDataID, () => {\n         this.fetchData()\n         this.onDeleteData(false, '')\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root} style={{ padding: 10 }}>\n\n            <Paper elevation={2} style={{ padding: 20 }}>\n\n               <Grid container>\n                  <Grid item>\n                     <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                        Patient Vaccinations\n                     </Typography>\n                  </Grid>\n                  <Grid item style={{ justifyContent: 'flex-end', textAlign: 'right' }}>\n                     <ActionBar style={{ marginBottom: 10 }}>\n                        <Button color=\"primary\" onClick={() => this.openDataForm(true)}>\n                           Add New Vaccination Record\n                        </Button>\n                     </ActionBar>\n                  </Grid>\n               </Grid>\n\n               {\n                  !_.isEmpty(this.state.data) ? (\n                  _.map(this.state.data, (record, idx) => {\n\n                     let vaccinationRecord = record.vaccination_details ? JSON.parse(record.vaccination_details) : []\n                     let vaccineString = '';\n\n                     if(!_.isEmpty(vaccinationRecord)){   \n                        vaccinationRecord.forEach((vRec, i) => {\n                           if(i == 0)\n                              vaccineString = vaccineString + vRec.vaccine + '(' + vRec.route + ')'\n                           else\n                              vaccineString = vaccineString + ', ' + vRec.vaccine + '(' + vRec.route + ')'\n                        })\n                     }\n\n                     let expanded = idx == 0 ? true : null\n                     let bgColor = idx == 0 ? '#e0f1ff80' : '#fff'\n\n                     return <ExpansionPanel expanded={expanded} style={{ backgroundColor: bgColor }}>\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                           <Typography className={classes.heading}><strong>{moment(record.vaccination_date).format(\"MM/DD/YYYY\")} - {vaccineString}</strong></Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                           <Grid container spacing={8}>\n                              <Paper style={{ width: '100%' }}>\n                              <Grid item md={12}>\n                                 <Grid container>\n                                    <Grid item md={6} xs={12} style={{ paddingRight: 5 }}>\n                                       <Table>\n                                          <TableBody>\n                                             <TableRow>\n                                                <TableCell>\n                                                   <strong>Vaccination Date</strong>\n                                                </TableCell>\n                                                <TableCell style={{ textAlign: 'right' }}>{moment(record.vaccination_date).format(\"MM/DD/YYYY\")}</TableCell>\n                                             </TableRow>\n                                             <TableRow>\n                                                <TableCell>\n                                                <strong>Vaccination Notes</strong>\n                                                </TableCell>\n                                                <TableCell style={{ textAlign: 'right' }}><p style={{ whiteSpace: 'pre-line' }}>{record.vaccination_notes || 'N/A'}</p></TableCell>\n                                             </TableRow>\n                                             <TableRow>\n                                                <TableCell>\n                                                <strong>Next Vaccination Schedule</strong>\n                                                </TableCell>\n                                                <TableCell style={{ textAlign: 'right' }}>{moment(record.next_vaccination_schedule).format(\"MM/DD/YYYY\")}</TableCell>\n                                             </TableRow>\n                                          </TableBody>\n                                       </Table>\n                                    </Grid>\n                                    <Grid item md={6} xs={12} style={{ paddingLeft: 5 }}>\n                                       <Table>\n                                          <TableBody>\n                                             <TableRow>\n                                                <TableCell>\n                                                      <strong>Vaccine</strong>\n                                                </TableCell>\n                                                <TableCell>\n                                                      <strong>Route</strong>\n                                                </TableCell>\n                                             </TableRow>\n                                                {\n                                                   _.map(vaccinationRecord, data => {\n                                                      return <TableRow>\n                                                         <TableCell>\n                                                            {data.vaccine}\n                                                         </TableCell>\n                                                         <TableCell>\n                                                            {data.route}\n                                                         </TableCell>\n                                                      </TableRow>\n                                                   })\n                                                }\n                                             </TableBody>\n                                       </Table>\n                                    </Grid>\n                                 </Grid>\n                              </Grid>\n                              </Paper>\n                           </Grid>\n                        </ExpansionPanelDetails>\n                        <ExpansionPanelActions style={{ justifyContent: 'flex-start' }}>\n                           <Button size=\"small\" color=\"primary\" onClick={() => this.onEditData(true, record)}>\n                              EDIT RECORD\n                           </Button>\n                           <Button size=\"small\" color=\"secondary\" onClick={() => this.onDeleteData(true, record.id)}>\n                              DELETE RECORD\n                           </Button>\n                        </ExpansionPanelActions>\n                     </ExpansionPanel>\n                  })) : <Typography style={{ color: 'rgb(169, 169, 169)' }} variant=\"h5\">No patient vaccinations data</Typography>\n               }\n            </Paper>\n            \n            <PatientVaccinationForm \n               open={this.state.openDataForm} \n               closeForm={() => this.openDataForm(false)} \n               refreshList={() => this.fetchData()}\n               dataID={this.props.match.params.patientID}\n               mode={this.state.mode}\n               data={this.state.selectedData}\n            />\n\n            <CConfirm\n               open={this.state.confirmDelete}\n               onClose={() => this.onDeleteData(false, '')}\n               onOk={() => this.onDeleteData(false, '')}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete this record?`}\n               actions={[\n                  { actionTitle: 'Confirm', action: () => this.deleteDataSuccess(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.onDeleteData(false, ''), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nPatientVaccination.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientVaccination)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport { Typography, Grid } from '@material-ui/core'\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\n\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\n\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { TextField } from '@material-ui/core'\n\nimport _ from 'lodash'\n\nconst styles = theme => ({\n   root: {\n      flexGrow: 1,\n   },\n   grow: {\n      flexGrow: 1,\n   },\n   chip: {\n      margin: theme.spacing.unit,\n   },\n   card: {\n      minWidth: 275,\n   },\n   title: {\n      fontSize: 14,\n   },\n})\n\nclass PatientMedications extends React.Component {\n   state = {\n      expanded: 0,\n      data: []\n   }\n\n   componentDidMount(){\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = { \n         date: '03/13/1990',\n         id: 1, \n         chief_complaint: 'Fever, cough', \n         hpi: 'The quick little brown fox jumps over the back of the lazy dog', \n         physical_exam: 'The quick little brown fox jumps over the back of the lazy dog', \n         diagnosis: 'The quick little brown fox jumps over the back of the lazy dog',\n      }\n\n      this.setState({\n         data\n      })\n   }\n\n   render() {\n      const { classes } = this.props\n\n      return (\n         <div className={classes.root} style={{ padding: 15 }}>\n            <form noValidate autoComplete=\"off\">\n               <Grid container spacing={16}>\n                  <Grid item md={6} xs={12}>\n                     <Card className={classes.card}>\n                        <CardContent>\n                           <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                              Available Medications\n                           </Typography>\n                        </CardContent>\n                     </Card>\n                  </Grid>\n                  <Grid item md={6} xs={12}>\n                     <Card className={classes.card} fullWidth>\n                        <CardContent>\n                           <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                              Prescriptions\n                           </Typography>\n                           \n                        </CardContent>\n                     </Card>\n                  </Grid>\n               </Grid>\n            </form>\n         </div>\n      )\n   }\n}\n\nPatientMedications.propTypes = {\n   classes: PropTypes.object.isRequired,\n }\n\nexport default withStyles(styles, { withTheme: true })(PatientMedications)","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { CConfirm } from 'components'\n\nconst styles = {\n  card: {\n    width: '99%',\n    padding: 5,\n    marginLeft: 5,\n    marginBottom: 5,\n    marginRight: 5\n  },\n  media: {\n    objectFit: 'cover',\n  },\n}\n\nclass ClinicCard extends React.Component {\n   \n   state = {\n      deleteOpen: false\n   }\n\n   deleteCardOpen = val => {\n      this.setState({ deleteOpen: val })\n   }\n\n   onDelete = () => {\n      this.props.onDelete()\n      this.deleteCardOpen(false)\n   }\n\n   render(){\n\n      const { classes } = this.props\n\n      return (\n         <div>\n            <Card className={classes.card}>\n            <CardActionArea onClick={() => this.props.onClick()}>\n\n               <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                     {this.props.data.clinic_name || 'No clinic name'}\n                  </Typography>\n                  <Typography component=\"p\">\n                     {this.props.data.clinic_address || 'Address not specified'}\n                  </Typography>\n                  <Typography component=\"p\">\n                     {this.props.data.clinic_contact || 'No contact number specified'}\n                  </Typography>\n               </CardContent>\n            </CardActionArea>\n            <CardActions>\n               {/* <Button size=\"small\" color=\"primary\">\n                  EDIT\n               </Button> */}\n               <Button size=\"small\" color=\"secondary\" onClick={() => this.deleteCardOpen(true)}>\n                  REMOVE\n               </Button>\n            </CardActions>\n            </Card>\n     \n            <CConfirm\n               open={this.state.deleteOpen}\n               onClose={() => this.deleteCardOpen(false)}\n               onOk={() => this.deleteCardOpen(false)}\n               title={'Delete Confirmation'}\n               message={`Are you sure you want to delete ${this.props.data.clinic_name}?`}\n               actions={[\n                  { actionTitle: 'Delete', action: () => this.onDelete(), actionType: 'primary' },\n                  { actionTitle: 'Cancel', action: () => this.deleteCardOpen(false), actionType: 'secondary' }\n               ]}\n            />\n         </div>\n      )\n   }\n}\n\nClinicCard.propTypes = {\n   classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(ClinicCard)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { CConfirm } from 'components'\nimport { _createClinic } from '../../rest/clinic.api'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass ClinicForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    submitForm = () => {\n        _createClinic(this.state.form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        })\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n\n        this.setState({\n            form\n        })\n    }\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <Modal\n                open={this.props.open}\n                onClose={this.handleClose}\n            >\n                <div style={getModalStyle()} className={classes.paper}>\n                    <Typography variant=\"h6\" id=\"modal-title\" style={{ marginBottom: 20 }}>\n                        Add New Clinic Form\n                    </Typography>\n\n                    <form noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"clinic_name\"\n                            label=\"Clinic Name\"\n                            placeholder=\"Enter name of clinic\"\n                            fullWidth\n                            margin=\"dense\"\n                            onChange={val => this.handleChange('clinic_name', val)}\n                            variant=\"outlined\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <TextField\n                            id=\"clinic_address\"\n                            label=\"Clinic Address\"\n                            placeholder=\"Enter Address of Clinic\"\n                            onChange={val => this.handleChange('clinic_address', val)}\n                            fullWidth\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <TextField\n                            id=\"cliniccontact\"\n                            label=\"Clinic Contact No\"\n                            placeholder=\"Enter contact number of clinic\"\n                            onChange={val => this.handleChange('clinic_contact', val)}\n                            fullWidth\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <Grid container>\n                            <Grid item md={6} xs={6}>\n                                <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                    Submit Form\n                                </Button>\n                            </Grid>\n                            <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                    Cancel\n                                </Button>\n                            </Grid>\n                        </Grid>\n\n                        <CConfirm\n                            open={this.state.confirm}\n                            onClose={() => this.showPopup(false)}\n                            title={'Add New Clinic'}\n                            message={'Are sure you want to save this clinic information?'}\n                            actions={[\n                                { actionTitle: 'Yes', action: () => this.submitForm(), actionType: 'primary' },\n                                { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                            ]}\n                        />\n\n                    </form>\n                </div>\n            </Modal>\n        )\n    }\n}\n\nClinicForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst ClinicFormWrapped = withStyles(styles)(ClinicForm)\n\nexport default ClinicFormWrapped","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport { CConfirm } from 'components'\nimport { _createUser, _getUsers, _deleteUser } from '../../rest/users.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass UserForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    submitForm = () => {\n        _createUser(this.state.form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        }, false)\n    }\n    handleDateChange = (field, e) => {\n        let form = this.state.form\n        form[field] = moment(e).format(\"MM/DD/YYYY\")\n        \n        this.setState({\n           form\n        })\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n        \n        this.setState({\n            form\n        })\n    }\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    User Registration Form\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <Grid container spacing={16}>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"lastname\"\n                                                label=\"Lastname\"\n                                                placeholder=\"Enter Lastname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('lastname', value)}\n                                                required={true}\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"firstname\"\n                                                label=\"Firstname\"\n                                                placeholder=\"Enter Firstname\"\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                onChange={value => this.handleChange('firstname', value)}\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"middlename\"\n                                                label=\"Middlename\"\n                                                placeholder=\"Enter Middlename\"\n                                                onChange={value => this.handleChange('middlename', value)}\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n                                    <DatePicker\n                                        keyboard\n                                        label=\"Birthdate\"\n                                        format={\"MM/DD/YYYY\"}\n                                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                                        mask={value =>\n                                        // handle clearing outside if value can be changed outside of the component\n                                        value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                        }\n                                        value={this.state.form.dob}\n                                        onChange={value => this.handleDateChange('dob', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                        shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"contact\"\n                                        label=\"Contact Number\"\n                                        placeholder=\"Enter Contact Number\"\n                                        onChange={value => this.handleChange('contact_no', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"email\"\n                                        label=\"Email\"\n                                        placeholder=\"Enter Email\"\n                                        onChange={value => this.handleChange('email', value)}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"password\"\n                                        label=\"Password\"\n                                        placeholder=\"Enter Password\"\n                                        onChange={value => this.handleChange('password', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"confirm_password\"\n                                        label=\"Confirm Password\"\n                                        placeholder=\"Enter Confirm\"\n                                        onChange={value => this.handleChange('confirm', value)}\n                                        fullWidth\n                                        type=\"password\"\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                    \n                                    <TextField\n                                        id=\"role\"\n                                        select\n                                        label=\"Role\"\n                                        onChange={value => this.handleChange('role', value)}\n                                        value={this.state.form.role}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n                                        <MenuItem value={'DOCTOR'}>DOCTOR</MenuItem>\n                                        <MenuItem value={'STAFF'}>STAFF</MenuItem>\n                                    </TextField>\n\n                                    <Grid container>\n                                        <Grid item md={6} xs={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Register\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'New User Confirmation'}\n                    message={'Are sure you want to save this user information?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nUserForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst UserFormWrapped = withStyles(styles)(UserForm)\n\nexport default UserFormWrapped","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport { CConfirm } from 'components'\nimport { _createUser, _getUsers, _deleteUser, _getDoctorsByClinic } from '../../rest/users.api'\nimport { _createPatient } from '../../rest/patient.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\n\nimport _ from 'lodash'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass PatientForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false,\n        doctors: []\n    }\n\n    componentDidMount(){\n        this.fetchDoctors()\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    fetchDoctors = () => {\n        _getDoctorsByClinic(this.props.match.params.clinicID, doctors => {\n            this.setState({ doctors })\n        })\n    }\n\n    submitForm = () => {\n        let form = this.state.form;\n\n        form['clinic'] = this.props.match.params.clinicID;\n\n        _createPatient(form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        })\n    }\n    \n    handleDateChange = (field, e) => {\n        let form = this.state.form\n        form[field] = moment(e).format(\"MM/DD/YYYY\")\n        \n        this.setState({\n           form\n        })\n    }\n\n    handleChange = (field, e) => {\n        let form = this.state.form\n        form[field] = e.target.value\n        \n        this.setState({\n            form\n        })\n    }\n    \n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    New Patient Form\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <Grid container spacing={16}>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"lastname\"\n                                                label=\"Lastname\"\n                                                placeholder=\"Enter Lastname\"\n                                                fullWidth\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                onChange={value => this.handleChange('lastname', value)}\n                                                required={true}\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                                inputProps={{ autoCapitalize: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"firstname\"\n                                                label=\"Firstname\"\n                                                placeholder=\"Enter Firstname\"\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                onChange={value => this.handleChange('firstname', value)}\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                        <Grid item md={4} xs={12}>\n                                            <TextField\n                                                id=\"middlename\"\n                                                label=\"Middlename\"\n                                                placeholder=\"Enter Middlename\"\n                                                onChange={value => this.handleChange('middlename', value)}\n                                                fullWidth\n                                                required={true}\n                                                margin=\"dense\"\n                                                variant=\"outlined\"\n                                                InputLabelProps={{\n                                                    shrink: true,\n                                                }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n                                    <DatePicker\n                                        keyboard\n                                        label=\"Birthdate\"\n                                        format={\"MM/DD/YYYY\"}\n                                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                                        mask={value =>\n                                        // handle clearing outside if value can be changed outside of the component\n                                        value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                        }\n                                        value={this.state.form.dob}\n                                        onChange={value => this.handleDateChange('dob', value)}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                        shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"address\"\n                                        label=\"Address\"\n                                        placeholder=\"Enter Address\"\n                                        fullWidth\n                                        margin=\"dense\"\n                                        value={this.state.form.address}\n                                        variant=\"outlined\"\n                                        onChange={value => this.handleChange('address', value)}\n                                        required={true}\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        inputProps={{ autoCapitalize: true }}\n                                    />\n\n                                    <TextField\n                                        id=\"gender\"\n                                        select\n                                        label=\"Gender\"\n                                        onChange={value => this.handleChange('gender', value)}\n                                        value={this.state.form.gender}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n                                        <MenuItem value={'MALE'}>MALE</MenuItem>\n                                        <MenuItem value={'FEMALE'}>FEMALE</MenuItem>\n                                    </TextField>\n                                    \n                                    <TextField\n                                        id=\"contact_no\"\n                                        label=\"Contact Number\"\n                                        placeholder=\"Enter Contact Number\"\n                                        onChange={value => this.handleChange('contact_no', value)}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n\n                                    <TextField\n                                        id=\"doctor\"\n                                        select\n                                        label=\"Attending Physician\"\n                                        onChange={value => this.handleChange('doctor', value)}\n                                        value={this.state.form.doctor}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        required={true}\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n                                        \n                                        {\n                                            _.map(this.state.doctors, doctor => {\n                                                return <MenuItem value={doctor.id}>Dr. {doctor.lastname}, {doctor.firstname}</MenuItem>\n                                            })\n                                        }\n                                        \n                                    </TextField>\n\n                                    <Grid container>\n                                        <Grid item md={6} xs={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Save Patient\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'New Patient Confirmation'}\n                    message={'Are sure you want to save this patient information?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n\n            </div>\n        )\n    }\n}\n\nPatientForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst PatientFormWrapped = withStyles(styles)(PatientForm)\n\nexport default PatientFormWrapped","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Modal from '@material-ui/core/Modal'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { CConfirm } from 'components'\nimport { _createClinicUser } from '../../rest/clinic_user.api'\nimport { _getClinics, _getClinicsOwn } from '../../rest/clinic.api'\nimport _ from 'lodash'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass ClinicUserForm extends React.Component {\n    state =  {\n        form: {},\n        confirm: false,\n        clinics: []\n    }\n\n    componentDidMount(){\n        this.fetchClinics()\n    }\n\n    showPopup = val => {\n        this.setState({ confirm: val })\n    }\n\n    fetchClinics = () => {\n        _getClinicsOwn(this.fetchClinicsSuccess)\n    }\n\n    fetchClinicsSuccess = data => {\n        this.setState({ clinics: data })\n    }\n\n    submitForm = () => {\n\n        let form = this.state.form\n        form['user_id'] = this.props.userID\n\n        _createClinicUser(this.state.form, () => {\n            this.showPopup(false)\n            this.props.closeForm()\n            this.props.refreshList()\n        })\n    }\n\n    handleChange = (field, e) => {\n\n        let form = this.state.form\n        form[field] = e.target.value\n\n        this.setState({\n            form\n        })\n    }\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Modal open={this.props.open}>\n                    <Grid \n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\">\n                        <Grid item>\n                            <Paper elevation={2} style={{ padding: 20, width: 300 }}>\n                                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                    User Clinic Assignment\n                                </Typography>\n                                <form noValidate autoComplete=\"off\">\n                                    <TextField\n                                        select\n                                        label=\"Select Clinic\"\n                                        className={classes.textField}\n                                        value={this.state.form.clinic_id}\n                                        onChange={val => this.handleChange('clinic_id', val)}\n                                        SelectProps={{\n                                            MenuProps: {\n                                            className: classes.menu,\n                                            },\n                                        }}\n                                        fullWidth\n                                        margin=\"dense\"\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                                shrink: true,\n                                        }}>\n\n                                        {\n                                            _.map(this.state.clinics, clinic => {\n                                                return <MenuItem value={clinic.id}>{clinic.clinic_name}</MenuItem>\n                                            })\n                                        }\n                                        \n                                    </TextField>\n\n                                    <Grid container>\n                                        <Grid item md={6}>\n                                            <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                                Submit Form\n                                            </Button>\n                                        </Grid>\n                                        <Grid item md={6} style={{ textAlign: 'right' }}>\n                                            <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n\n                                </form>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Modal>\n\n                <CConfirm\n                    open={this.state.confirm}\n                    onClose={() => this.showPopup(false)}\n                    onOk={() => this.showPopup(false)}\n                    title={'Confirm Clinic Assignment'}\n                    message={'Are sure you want to assign user to this clinic?'}\n                    actions={[\n                        { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                        { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                    ]}\n                />\n            </div>\n        )\n    }\n}\n\nClinicUserForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst ClinicUserFormWrapped = withStyles(styles)(ClinicUserForm)\n\nexport default ClinicUserFormWrapped","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl'\nimport InputAdornment from '@material-ui/core/InputAdornment'\n\nimport { CConfirm } from 'components'\nimport { _createPatientHistory } from '../../rest/patient_history.api'\nimport { DatePicker } from \"material-ui-pickers\"\nimport moment from 'moment'\nimport _ from 'lodash'\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\n\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport '../../styles/core.css'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n})\n\nclass PatientHistoryForm extends React.Component {\n\n   constructor(props){\n\n      super(props);\n      // const html = '<p>Hey this <strong>editor</strong> rocks 😀</p>';\n      // const contentBlock = htmlToDraft(html);\n\n      // if (contentBlock) {\n      //    const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      //    const editorState = EditorState.createWithContent(contentState);\n      //    this.state = {\n      //       editorState,\n      //       form: {},\n      //       confirm: false\n      //    }\n      // }\n      // else {\n         \n      // }\n\n      this.state =  {\n         form: {},\n         confirm: false\n      }\n   }\n\n   showPopup = val => {\n      this.setState({ confirm: val })\n   }\n\n   modalValidate = () => {\n      if(this.props.mode === 'edit'){\n         let form = _.clone(this.props.data)\n         this.setState({ form })\n      } else {\n         this.setState({ form: {} })\n      }\n   }\n\n   submitForm = () => {      \n      let form = _.clone(this.state.form);\n\n      form['patient'] = this.props.dataID;\n\n      if(_.isEmpty(this.state.form.visit_datetime)){\n         form['visit_datetime'] = moment().format(\"MM/DD/YYYY\")\n      }\n\n      if(this.props.mode === 'edit')\n         form['patient_history_id'] = this.state.form.id\n\n      _createPatientHistory(form, () => {\n         this.showPopup(false)\n         this.props.closeForm()\n         this.props.refreshList()\n      })\n   }\n\n   handleDateChange = (field, e) => {\n      let form = this.state.form\n      form[field] = moment(e).format(\"MM/DD/YYYY\")\n      \n      this.setState({\n         form\n      })\n   }\n\n   handleChange = (field, e) => {\n      let form = this.state.form\n      form[field] = e.target.value\n      \n      this.setState({\n         form\n      })\n   }\n\n   // onEditorStateChange = editorState => {\n   //    this.setState({\n   //      editorState\n   //    })\n   // }\n\n   onWYSChange = text => {\n      console.log(text)\n   }\n   render() {\n      \n      const { editorState } = this.state\n\n      return (\n         <div>\n               <Modal open={this.props.open} onRendered={() => this.modalValidate()}>\n                  <Grid \n                     container\n                     direction=\"row\"\n                     justify=\"center\"\n                     alignItems=\"center\">\n                     <Grid item>\n                           <Paper elevation={2} style={{ padding: 20 }}>\n                              <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                                 { this.props.mode === 'edit' ? 'Update' : 'New'} Patient History Record\n                              </Typography>\n                              <form noValidate autoComplete=\"off\">\n                                 <Grid container>\n                                       <Grid item md={4} xs={12} style={{ paddingRight: 5 }}>\n                                          <DatePicker\n                                             keyboard\n                                             label=\"Date of Visit\"\n                                             format={\"MM/DD/YYYY\"}\n                                             placeholder={moment().format(\"MM/DD/YYYY\")}\n                                             mask={value =>\n                                                   // handle clearing outside if value can be changed outside of the component\n                                                   value ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/] : []\n                                             }\n                                             value={this.state.form.visit_datetime}\n                                             onChange={value => this.handleDateChange('visit_datetime', value)}\n                                             fullWidth\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             InputLabelProps={{\n                                                   shrink: true,\n                                             }}\n                                          />\n\n                                          <TextField\n                                             id=\"chief_complaint\"\n                                             label=\"Chief Complaint\"\n                                             placeholder=\"Enter Chief Complaint\"\n                                             value={this.state.form.chief_complaint || ''}\n                                             fullWidth\n                                             margin=\"dense\"\n                                             multiline\n                                             variant=\"outlined\"\n                                             InputLabelProps={{\n                                                   shrink: true,\n                                             }}\n                                             onChange={value => this.handleChange('chief_complaint', value)}\n                                             inputProps={{ autoCapitalize: true }}\n                                          />\n\n                                          <TextField\n                                             id=\"history_present_illness\"\n                                             label=\"History of Illness\"\n                                             placeholder=\"Enter of Illness\"\n                                             value={this.state.form.history_present_illness || ''}\n                                             fullWidth\n                                             multiline\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('history_present_illness', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             inputProps={{ autoCapitalize: true }}\n                                          />\n\n                                          <TextField\n                                             id=\"physical_exam\"\n                                             label=\"Physical Exam\"\n                                             placeholder=\"Enter Physical Exam\"\n                                             value={this.state.form.physical_exam || ''}\n                                             fullWidth\n                                             multiline\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('physical_exam', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             inputProps={{ autoCapitalize: true }}\n                                          />\n\n                                          <TextField\n                                             id=\"diagnosis\"\n                                             label=\"Diagnosis\"\n                                             placeholder=\"Enter Diagnosis\"\n                                             value={this.state.form.diagnosis || ''}\n                                             fullWidth\n                                             multiline\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('diagnosis', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             inputProps={{ autoCapitalize: true }}\n                                          />\n                                       </Grid>\n                                       <Grid item md={4} xs={12} style={{ paddingLeft: 5, paddingRight: 5 }}>\n                                          <TextField\n                                             id=\"init_weight\"\n                                             label=\"Weight\"\n                                             placeholder=\"Enter Weight\"\n                                             value={this.state.form.init_weight || ''}\n                                             fullWidth\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('init_weight', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             InputProps={{\n                                                      endAdornment: <InputAdornment position=\"end\">kg</InputAdornment>,\n                                                   }}\n                                          />\n\n                                          <TextField\n                                             id=\"init_height\"\n                                             label=\"Height\"\n                                             placeholder=\"Enter Height\"\n                                             value={this.state.form.init_height || ''}\n                                             fullWidth\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('init_height', value)}\n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             InputProps={{\n                                                      endAdornment: <InputAdornment position=\"end\">cm</InputAdornment>,\n                                             }}\n                                          />\n\n                                          <TextField\n                                             id=\"init_head_circumference\"\n                                             label=\"Head Circumference\"\n                                             placeholder=\"Enter Head Circumference\"\n                                             value={this.state.form.init_head_circumference || ''}\n                                             fullWidth\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('init_head_circumference', value)}\n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             InputProps={{\n                                                      endAdornment: <InputAdornment position=\"end\">cm</InputAdornment>,\n                                             }}\n                                          />\n\n                                          <TextField\n                                             id=\"init_temp\"\n                                             label=\"Temperature\"\n                                             placeholder=\"Enter Temperature\"\n                                             value={this.state.form.init_temp || ''}\n                                             fullWidth\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('init_temp', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             InputProps={{\n                                                   endAdornment: <InputAdornment position=\"end\">C</InputAdornment>,\n                                             }}\n                                          />\n\n                                          <TextField\n                                             id=\"init_pulse_rate\"\n                                             label=\"Pulse Rate\"\n                                             value={this.state.form.init_pulse_rate || ''}\n                                             placeholder=\"Enter Pulse Rate\"\n                                             fullWidth\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('init_pulse_rate', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             InputProps={{\n                                                   endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\n                                             }}\n                                          />\n\n                                          <TextField\n                                             id=\"init_resp_rate\"\n                                             label=\"Respiratory Rate\"\n                                             value={this.state.form.init_resp_rate || ''}\n                                             placeholder=\"Enter Respiratory Rate\"\n                                             fullWidth\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('init_resp_rate', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                             InputProps={{\n                                                   endAdornment: <InputAdornment position=\"end\">bpm</InputAdornment>,\n                                             }}\n                                          />\n                                       </Grid>\n                                       <Grid item md={4} xs={12} style={{ paddingLeft: 5 }}>\n                                          <TextField\n                                             id=\"medications\"\n                                             label=\"Medications\"\n                                             value={this.state.form.medications || ''}\n                                             placeholder=\"Enter Medications\"\n                                             fullWidth\n                                             multiline\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('medications', value)}\n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                          />\n\n                                          <TextField\n                                             id=\"diagnostics\"\n                                             label=\"Diagnostics/Labs\"\n                                             value={this.state.form.diagnostics || ''}\n                                             placeholder=\"Enter Diagnostics/Labs\"\n                                             fullWidth\n                                             multiline\n                                             margin=\"dense\"\n                                             variant=\"outlined\"\n                                             onChange={value => this.handleChange('diagnostics', value)}\n                                             \n                                             InputLabelProps={{\n                                                      shrink: true,\n                                             }}\n                                          />\n\n{/* <Editor\n          editorState={editorState}\n         toolbarHidden\n          onEditorStateChange={this.onEditorStateChange}\n        />\n        <textarea\n          disabled\n          value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}\n        /> */}\n                                          \n                                       </Grid>\n                                 </Grid>\n\n                                 <Grid container>\n                                       <Grid item md={6} xs={6}>\n                                          <Button variant=\"contained\" color=\"primary\" onClick={() => this.showPopup(true)} style={{ marginTop: 20 }}>\n                                             Save History Record\n                                          </Button>\n                                       </Grid>\n                                       <Grid item md={6} xs={6} style={{ textAlign: 'right' }}>\n                                          <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.closeForm()} style={{ marginTop: 20 }}>\n                                             Cancel\n                                          </Button>\n                                       </Grid>\n                                 </Grid>\n                              </form>\n                           </Paper>\n                     </Grid>\n                  </Grid>\n               </Modal>\n\n               <CConfirm\n                  open={this.state.confirm}\n                  onClose={() => this.showPopup(false)}\n                  onOk={() => this.showPopup(false)}\n                  title={'Saving Confirmation'}\n                  message={'Are sure you want to save this patient history data?'}\n                  actions={[\n                     { actionTitle: 'Confirm', action: () => this.submitForm(), actionType: 'primary' },\n                     { actionTitle: 'Cancel', action: () => this.showPopup(false), actionType: 'secondary' }\n                  ]}\n               />\n         </div>\n      )\n   }\n}\n\nPatientHistoryForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nconst PatientHistoryFormWrapped = withStyles(styles)(PatientHistoryForm)\n\nexport default PatientHistoryFormWrapped","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport { CConfirm } from \"components\";\nimport { _createPatientVaccination } from \"../../rest/patient_vaccination.api\";\nimport { DatePicker } from \"material-ui-pickers\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: \"absolute\",\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: \"none\"\n  }\n});\n\nclass PatientVaccinationForm extends React.Component {\n  state = {\n    form: {},\n    confirm: false,\n    vaccList: []\n  };\n\n  showPopup = val => {\n    this.setState({ confirm: val });\n  };\n\n  modalValidate = () => {\n    if (this.props.mode === \"edit\") {\n      let form = _.clone(this.props.data);\n      let vaccList = _.clone(JSON.parse(this.props.data.vaccination_details))\n      \n      this.setState({\n        form,\n        vaccList\n      })\n\n    } else {\n      this.setState({ form: {}, vaccList: [] });\n    }\n  }\n\n  submitForm = () => {\n    let form = this.state.form;\n\n    form[\"patient\"] = this.props.dataID;\n\n    if (_.isEmpty(this.state.form.visit_datetime)) {\n      form[\"visit_datetime\"] = moment().format(\"MM/DD/YYYY\");\n    }\n\n    if (_.isEmpty(this.state.form.vaccination_date)) {\n      form[\"vaccination_date\"] = moment().format(\"MM/DD/YYYY\");\n    }\n\n    if (_.isEmpty(this.state.form.next_vaccination_schedule)) {\n      form[\"next_vaccination_schedule\"] = moment().format(\"MM/DD/YYYY\");\n    }\n\n    form[\"vaccination_details\"] = JSON.stringify(this.state.vaccList);\n\n    if (this.props.mode === \"edit\")\n      form[\"patient_vaccination_id\"] = this.state.form.id;\n\n      _createPatientVaccination(form, () => {\n         this.showPopup(false)\n         this.props.closeForm()\n         this.props.refreshList()\n      })\n  };\n\n  handleDateChange = (field, e) => {\n    let form = this.state.form;\n    form[field] = moment(e).format(\"MM/DD/YYYY\");\n\n    this.setState({\n      form\n    });\n  };\n\n  handleChange = (field, e) => {\n    let form = this.state.form;\n    form[field] = e.target.value;\n\n    this.setState({\n      form\n    });\n  };\n\n  handleVaccChange = (field, e) => {\n    this.setState({\n      [field]: e.target.value\n    });\n  };\n\n  addToVaccList = () => {\n    let vaccList = this.state.vaccList;\n\n    vaccList.push({\n      id: rand(),\n      vaccine: this.state.vaccine,\n      route: this.state.route\n    });\n\n    this.setState({\n      vaccList\n    });\n  };\n\n  removeVacc = id => {\n    let vaccList = this.state.vaccList;\n\n    _.remove(vaccList, data => {\n      return data.id == id;\n    });\n\n    this.setState({\n      vaccList\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Modal open={this.props.open} onRendered={() => this.modalValidate()}>\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            <Grid item>\n              <Paper elevation={2} style={{ padding: 20 }}>\n                <Typography variant=\"h6\" style={{ marginBottom: 20 }}>\n                  {this.props.mode === \"edit\" ? \"Update\" : \"New\"} Vaccination\n                  Record\n                </Typography>\n                <form noValidate autoComplete=\"off\">\n                  <Grid container>\n                    <Grid item md={6} xs={12} style={{ paddingRight: 5 }}>\n                      <DatePicker\n                        keyboard\n                        label=\"Date of Visit\"\n                        format={\"MM/DD/YYYY\"}\n                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                        mask={value =>\n                          // handle clearing outside if value can be changed outside of the component\n                          value\n                            ? [\n                                /\\d/,\n                                /\\d/,\n                                \"/\",\n                                /\\d/,\n                                /\\d/,\n                                \"/\",\n                                /\\d/,\n                                /\\d/,\n                                /\\d/,\n                                /\\d/\n                              ]\n                            : []\n                        }\n                        value={this.state.form.visit_datetime || moment().format(\"MM/DD/YYYY\")}\n                        onChange={value =>\n                          this.handleDateChange(\"visit_datetime\", value)\n                        }\n                        fullWidth\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                          shrink: true\n                        }}\n                      />\n\n                      <DatePicker\n                        keyboard\n                        label=\"Vaccination Date\"\n                        format={\"MM/DD/YYYY\"}\n                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                        mask={value =>\n                          // handle clearing outside if value can be changed outside of the component\n                          value\n                            ? [\n                                /\\d/,\n                                /\\d/,\n                                \"/\",\n                                /\\d/,\n                                /\\d/,\n                                \"/\",\n                                /\\d/,\n                                /\\d/,\n                                /\\d/,\n                                /\\d/\n                              ]\n                            : []\n                        }\n                        value={this.state.form.vaccination_date}\n                        onChange={value =>\n                          this.handleDateChange(\"vaccination_date\", value)\n                        }\n                        fullWidth\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                          shrink: true\n                        }}\n                      />\n\n                      <TextField\n                        id=\"vaccination_notes\"\n                        label=\"Vaccination Notes\"\n                        placeholder=\"Enter Vaccination Notes\"\n                        fullWidth\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        multiline\n                        onChange={value =>\n                          this.handleChange(\"vaccination_notes\", value)\n                        }\n                        value={this.state.form.vaccination_notes || ''}\n                        InputLabelProps={{\n                          shrink: true\n                        }}\n                        inputProps={{ autoCapitalize: true }}\n                      />\n\n                      <DatePicker\n                        keyboard\n                        label=\"Next Vaccination Schedule\"\n                        format={\"MM/DD/YYYY\"}\n                        placeholder={moment().format(\"MM/DD/YYYY\")}\n                        mask={value =>\n                          // handle clearing outside if value can be changed outside of the component\n                          value\n                            ? [\n                                /\\d/,\n                                /\\d/,\n                                \"/\",\n                                /\\d/,\n                                /\\d/,\n                                \"/\",\n                                /\\d/,\n                                /\\d/,\n                                /\\d/,\n                                /\\d/\n                              ]\n                            : []\n                        }\n                        value={this.state.form.next_vaccination_schedule}\n                        onChange={value =>\n                          this.handleDateChange(\n                            \"next_vaccination_schedule\",\n                            value\n                          )\n                        }\n                        fullWidth\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                          shrink: true\n                        }}\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      md={6}\n                      xs={12}\n                      style={{ paddingLeft: 5, paddingRight: 5 }}\n                    >\n                      <Grid container>\n                        <Grid item md={5}>\n                          <TextField\n                            id=\"vaccine\"\n                            label=\"Vaccine\"\n                            placeholder=\"Enter Vaccine\"\n                            fullWidth\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            onChange={value =>\n                              this.handleVaccChange(\"vaccine\", value)\n                            }\n                            InputLabelProps={{\n                              shrink: true\n                            }}\n                            inputProps={{ autoCapitalize: true }}\n                          />\n                        </Grid>\n                        <Grid item md={5}>\n                          <TextField\n                            id=\"route\"\n                            label=\"Route\"\n                            placeholder=\"Enter Route\"\n                            fullWidth\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            onChange={value =>\n                              this.handleVaccChange(\"route\", value)\n                            }\n                            InputLabelProps={{\n                              shrink: true\n                            }}\n                            inputProps={{ autoCapitalize: true }}\n                          />\n                        </Grid>\n                        <Grid item md={2}>\n                          <Button color=\"primary\" onClick={this.addToVaccList}>\n                            Add\n                          </Button>\n                        </Grid>\n                      </Grid>\n\n                      <Table>\n                        <TableBody>\n                          <TableRow>\n                            <TableCell>\n                              <strong>Vaccine</strong>\n                            </TableCell>\n                            <TableCell>\n                              <strong>Route</strong>\n                            </TableCell>\n                            <TableCell>\n                              <strong>Action</strong>\n                            </TableCell>\n                          </TableRow>\n                          {_.map(this.state.vaccList, data => {\n                            return (\n                              <TableRow>\n                                <TableCell>{data.vaccine}</TableCell>\n                                <TableCell>{data.route}</TableCell>\n                                <TableCell>\n                                  <Button\n                                    color=\"secondary\"\n                                    onClick={() => this.removeVacc(data.id)}\n                                  >\n                                    REMOVE\n                                  </Button>\n                                </TableCell>\n                              </TableRow>\n                            );\n                          })}\n                        </TableBody>\n                      </Table>\n                    </Grid>\n                  </Grid>\n\n                  <Grid container>\n                    <Grid item md={6} xs={6}>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => this.showPopup(true)}\n                        style={{ marginTop: 20 }}\n                      >\n                        Save Vaccination Record\n                      </Button>\n                    </Grid>\n                    <Grid item md={6} xs={6} style={{ textAlign: \"right\" }}>\n                      <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={() => this.props.closeForm()}\n                        style={{ marginTop: 20 }}\n                      >\n                        Cancel\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </form>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Modal>\n\n        <CConfirm\n          open={this.state.confirm}\n          onClose={() => this.showPopup(false)}\n          onOk={() => this.showPopup(false)}\n          title={\"Saving Confirmation\"}\n          message={\"Are sure you want to save this vaccination data?\"}\n          actions={[\n            {\n              actionTitle: \"Confirm\",\n              action: () => this.submitForm(),\n              actionType: \"primary\"\n            },\n            {\n              actionTitle: \"Cancel\",\n              action: () => this.showPopup(false),\n              actionType: \"secondary\"\n            }\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nPatientVaccinationForm.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst PatientVaccinationFormWrapped = withStyles(styles)(\n  PatientVaccinationForm\n);\n\nexport default PatientVaccinationFormWrapped;\n","import React from 'react';\nimport { Grid, Button } from '@material-ui/core';\n\nclass ActionBar extends React.Component {\n    render() {\n        return (\n            <Grid container style={this.props.style}>\n                <Grid item>\n                    {this.props.children}\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default ActionBar","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField, LinearProgress, CircularProgress\n} from '@material-ui/core'\nimport { CMainLayout } from 'components'\nimport { RouteTo } from '../components/Utils/RouterAction'\nimport { _tryLogin } from '../rest/users.api'\nimport * as rule from '../components/Utils/RoleAccessConfig'\n\nimport _ from 'lodash'\n\nconst styles = {\n    root: {\n      flexGrow: 1,\n    },\n    grow: {\n      flexGrow: 1,\n    }\n}\n\nclass MainContainer extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        showRegistration: false,\n        email: '',\n        password: '',\n        message: '',\n        inProgress: false\n    }\n\n    componentDidMount(){\n        this.validateAuth()\n    }\n\n    validateAuth = () => {\n        if(!_.isEmpty(localStorage.getItem(\"access_token\"))){\n            if(rule.roleQualified(rule.VIEW_DASHBOARD))\n                this.goTo('/dashboard')\n            else\n                this.goTo('/clinics')\n        }\n    }\n\n    showRegistration = val => {\n        this.setState({ showRegistration: val })\n    }\n\n    goTo = (path) => {\n        RouteTo(this.props, path)\n    }\n\n    tryLogin = () => {\n        this.setState({ inProgress: true }, () => {\n            _tryLogin({\n                email: this.state.email,\n                password: this.state.password\n            }, data => {\n                \n                if(data.status == 200 && !_.isEmpty(data.access_token)){\n                    if(rule.roleQualified(rule.VIEW_DASHBOARD))\n                        this.goTo('/dashboard')\n                    else\n                        this.goTo('/clinics')\n                }\n                else if(data.status == 401 && data.status == 'Unauthorized') {\n                    this.setState({ message: 'Invalid email or password', inProgress: false })\n                }\n                else if(data.status == 401 && data.status == 'Unverified') {\n                    this.setState({ message: 'Please check your email and click on the verification link', inProgress: false })\n                }\n            })\n        })\n    }\n\n    handleChange = (field, e) => {\n        this.setState({\n            [field]: e.target.value\n        })\n    }\n\n    render(){\n        const { classes } = this.props\n        return (\n            <CMainLayout className={classes.root}>\n\n                \n                <Grid container style={{ marginTop: 50 }} spacing={8} justify=\"center\" alignContent=\"center\">\n                    <Grid item>\n                        {\n                            !_.isEmpty(this.state.message) ? <Typography variant=\"button\" gutterBottom style={{ color: 'red' }}>\n                                {this.state.message}\n                            </Typography> : null\n                        }\n                        <form noValidate autoComplete=\"off\">\n\n                            <TextField\n                                id=\"username\"\n                                label=\"Username/Email\"\n                                placeholder=\"Enter Username/Email\"\n                                fullWidth\n                                margin=\"dense\"\n                                required\n                                onChange={val => this.handleChange('email', val)}\n                                variant=\"outlined\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n      \n                            <TextField\n                                id=\"password\"\n                                label=\"Password\"\n                                placeholder=\"Enter Password\"\n                                fullWidth\n                                onChange={val => this.handleChange('password', val)}\n                                type=\"password\"\n                                margin=\"dense\"\n                                required\n                                variant=\"outlined\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                onKeyPress={ev => {\n\n                                    if (ev.key === 'Enter') {\n                                        this.tryLogin()\n                                        ev.preventDefault();\n                                    }\n                                }}\n                            />\n                            \n                            <Button disabled={this.state.inProgress} variant=\"contained\" fullWidth color=\"primary\" onClick={() => this.tryLogin()} style={{ marginTop: 10 }}>\n                                {\n                                    this.state.inProgress ? 'Authenticating' : 'Login'\n                                }\n                            </Button>\n\n                            {/* <Button fullWidth color=\"primary\" onClick={() => this.goTo('/dashboard')} style={{ marginTop: 10 }}>\n                                Forgot password\n                            </Button> */}\n                        </form>\n                    </Grid>\n                </Grid>\n        \n            </CMainLayout>\n        )\n    }\n}\n\nMainContainer.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(MainContainer)","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport { CDrawerLayout, ManageClinics, ManageUsers, Settings, Dashboard } from 'components'\n\nimport { tryLogout } from '../rest/users.api'\nimport { ActOnBranch } from '../components/Utils/RouterAction';\n\nconst styles = {\n    root: {\n      flexGrow: 1\n    },\n    grow: {\n      flexGrow: 1\n    }\n}\n\nclass HomePage extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        showClinicForm: false\n    }\n\n    showClinicForm = val => {\n        this.setState({ showClinicForm: val })\n    }\n\n    render(){\n        const { classes } = this.props\n        \n        // let drawers = [\n        //     { name: 'Dashboard', route: '/dashboard', icon: <InboxIcon /> },\n        //     { name: 'Manage Clinics', route: '/dashboard/manage_clinics', icon: <InboxIcon /> },\n        //     { name: 'Manage Users', route: '/dashboard/manage_users', icon: <MailIcon /> },\n        //     { name: 'Settings', route: '/dashboard/settings', icon: <InboxIcon /> }\n        // ]\n\n        let drawers = [\n            { name: 'Dashboard', route: '/dashboard', icon: <InboxIcon /> },\n            { name: 'Manage Clinics', route: '/dashboard/manage_clinics', icon: <InboxIcon /> },\n            { name: 'Manage Users', route: '/dashboard/manage_users', icon: <MailIcon /> },\n        ]\n\n        return (\n            <CDrawerLayout drawers={drawers} {...this.props}>\n                <Route exact path=\"/dashboard\" render={() => <Dashboard />} />\n                <Route exact path=\"/dashboard/manage_clinics\" render={() => <ManageClinics {...this.props} />} />\n                <Route exact path=\"/dashboard/manage_users\" render={() => <ManageUsers {...this.props} />} />\n                <Route exact path=\"/dashboard/settings\" render={() => <Settings />} />\n            </CDrawerLayout>\n        )\n    }\n}\n\nHomePage.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(HomePage)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\n\nimport { CDrawerLayout, ManageClinics } from 'components'\nimport _ from 'lodash'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass ClinicListPage extends React.Component {\n   state = {\n      data: {},\n      clinicID: 0\n   }\n\n   componentDidMount(){\n      this.setState({ clinicID: this.props.match.params.clinicID })\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = {\n         clinic: {\n            id: 1,\n            clinic_name: 'Ace Dermatology'\n         },\n         patients: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ],\n         appointments: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ]\n      }\n\n      this.setState({ data })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <CDrawerLayout unPad firstPage {...this.props}>\n            <Route exact path={`/clinics`} render={() => <ManageClinics {...this.props} />} />\n         </CDrawerLayout>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(ClinicListPage)","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\n\nimport { CDrawerLayout, PatientDashboard } from 'components'\n\nconst styles = {\n    root: {\n      flexGrow: 1\n    },\n    grow: {\n      flexGrow: 1\n    }\n}\n\nclass PatientContainer extends React.Component {\n    constructor(props){\n        super(props)\n    }\n\n    state = {\n        patientID: 0\n    }\n\n    componentDidMount(){\n        this.setState({ patientID: this.props.match.params.patientID })\n    }\n\n    render(){\n        const { classes } = this.props\n        \n        let drawers = [\n            { name: 'Information', route: `/patient/${this.state.patientID}`, icon: <InboxIcon /> },\n            { name: 'History', route: `/patient/${this.state.patientID}/history`, icon: <InboxIcon /> },\n        ]\n\n        return (\n            <CDrawerLayout unPad backType {...this.props}>\n                <Route exact path={`/patient/${this.state.patientID}`} render={() => <PatientDashboard {...this.props} />} />\n            </CDrawerLayout>\n        )\n    }\n}\n\nPatientContainer.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(PatientContainer)","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'\nimport {\n  Modal, AppBar, Toolbar, Typography, Button, IconButton, Grid, Paper, TextField\n} from '@material-ui/core'\n\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\n\nimport { CDrawerLayout, Patients, Appointments, ClinicDashboard  } from 'components'\nimport _ from 'lodash'\n\nconst styles = {\n   root: {\n     flexGrow: 1,\n   },\n   grow: {\n     flexGrow: 1,\n   }\n}\n\nclass ClinicContainer extends React.Component {\n   state = {\n      data: {},\n      clinicID: 0\n   }\n\n   componentDidMount(){\n      this.setState({ clinicID: this.props.match.params.clinicID })\n      this.fetchData()\n   }\n\n   fetchData = () => {\n      let data = {\n         clinic: {\n            id: 1,\n            clinic_name: 'Ace Dermatology'\n         },\n         patients: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ],\n         appointments: [\n            { id: 1, patient: 'Ace Jordan Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 2, patient: 'Gwen Lumaad', gender: 'F', dob: '03/13/1990' },\n            { id: 3, patient: 'Micah Lumaad', gender: 'M', dob: '03/13/1990' },\n            { id: 4, patient: 'Caye Britani Lumaad', gender: 'F', dob: '03/13/1990' },\n         ]\n      }\n\n      this.setState({ data })\n   }\n\n   render() {\n      const { classes, theme } = this.props;\n\n      return (\n         <CDrawerLayout unPad backType {...this.props}>\n            <Route exact path={`/clinic/${this.state.clinicID}`} render={() => <ClinicDashboard {...this.props} />} />\n         </CDrawerLayout>\n      )\n   }\n}\n\n\nexport default withStyles(styles, { withTheme: true })(ClinicContainer)","import React from 'react'\nimport { MainContainer, AccessDenied, HomePage } from 'containers'\nimport { RouteTo, CheckAuthentication } from 'components/Utils/RouterAction'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport { DecideWhere } from '../components/Utils/RouterAction'\nimport PatientContainer from '../containers/PatientContainer';\nimport ClinicContainer from '../containers/ClinicContainer';\nimport { ClinicListPage } from '../containers';\n\nfunction Routes() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={MainContainer} />\n        <Route path=\"/dashboard\" render={props => CheckAuthentication(<HomePage {...props} />, ['ADMIN','MAIN_OWNER'])} />\n        <Route path=\"/clinics\" render={props => CheckAuthentication(<ClinicListPage {...props} />, ['ADMIN','MAIN_OWNER','STAFF','DOCTOR'])} />\n        <Route path=\"/clinic/:clinicID\" render={props => <ClinicContainer {...props} />} />\n        <Route path=\"/patient/:patientID\" render={props => <PatientContainer {...props} />} />\n        <Route component={AccessDenied} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default Routes\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/* eslint-disable no-console */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registrationParam => {\n      const registration = registrationParam\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from 'store'\nimport Routes from 'routes'\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport registerServiceWorker from 'utils/registerServiceWorker'\nimport MomentUtils from '@date-io/moment'\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#2196f3'\n    }\n  }\n})\n\nrender(\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <MuiThemeProvider theme={theme}>\n        <Provider store={configureStore()}>\n          <Routes />\n        </Provider>\n      </MuiThemeProvider>\n    </MuiPickersUtilsProvider>,\n  document.getElementById('root')\n)\n\nregisterServiceWorker()\n","import { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport rootReducer from 'reducers'\n\nconst middlewares = [ReduxThunk]\nconst enhancer = [applyMiddleware(...middlewares)]\n\nexport default function configureStore(initialState = {}) {\n  return createStore(rootReducer, initialState, ...enhancer)\n}\n"],"sourceRoot":""}